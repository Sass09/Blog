[
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "posts",
    "section": "",
    "text": "Data Import\n\n\n\n\n\n\n\n\n\n\n\n\nShifa Maqsood\n\n\n\n\n\n\n  \n\n\n\n\nMidterm Part 2\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\nData Vis\n\n\n\n\n\n\n\n\n\n\n\n\nShifa Maqsood\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 3 qmd skill check\n\n\n\n\n\n\n\n\n\n\n\n\nShifa Maqsood\n\n\n\n\n\n\n  \n\n\n\n\nNotes for class\n\n\n\n\n\n\n\n\n\n\n\n\nShifa Maqsood\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMidterm project part 1\n\n\n\n\n\n\n\n\n\n\n\n\nShifa Maqsood\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Data Analytics Blog",
    "section": "",
    "text": "This blog is for weekly assignments"
  },
  {
    "objectID": "posts/new/index.html",
    "href": "posts/new/index.html",
    "title": "Notes for class",
    "section": "",
    "text": "Learn more about push and pull about git\nmake a change, commit and push the change.\nMake changes to you to ur file.\nRender your websites.\nCommit the changes.\nPush to the origin\nRstudio IDE is a great resource.\nA reproducible report allows others to understand and check your work.\nnever install a package inside of the script\nthere is another easy way to use a function. You can simply use package::function()\nWhenever you put comma in a function, it means you are giving different arguments to it. For example, mean(x=1,2,3,4,5) means more than one argument"
  },
  {
    "objectID": "posts/week 3 qmd skills /index.html",
    "href": "posts/week 3 qmd skills /index.html",
    "title": "Week 3 qmd skills",
    "section": "",
    "text": "Be able to make a new .qmd document\nBe able to render a .qmd document\nBe able to insert simple markdown plain text (headers, lists, paragraphs), and render the document.\n\n#This is a first level header ##This is a second level header 4. Be aware of resources to help you learn more about markdown options. 5. Be able to insert an R code chunk, and show the output in the rendered document. - macro for quick insert 6. Running R code chunks in a qmd - pressing play - copy/paste into console - highlight then command-enter (mac) - precedence issues (first to last) 7. Be aware of R code chunk options, and how to use eval, messages, error, warning, and echo. 8. Be able to set code chunk options per chunk, and/or for the whole document. Understand rules for precedence (which options will apply if both are set.) 9. Write inline r code. 10. Explain how the rendering environment is different from the Rstudio environment. 11. Be aware of more advanced quarto options for html documents, and try some of the options."
  },
  {
    "objectID": "posts/Tipsheet post /index.html",
    "href": "posts/Tipsheet post /index.html",
    "title": "Notes for class",
    "section": "",
    "text": "Learn more about push and pull about git\nmake a change, commit and push the change.\nMake changes to you to ur file.\nRender your websites.\nCommit the changes.\nPush to the origin\nRstudio IDE is a great resource.\nA reproducible report allows others to understand and check your work.\nnever install a package inside of the script\nthere is another easy way to use a function. You can simply use package::function()\nWhenever you put comma in a function, it means you are giving different arguments to it. For example, mean(x=1,2,3,4,5) means more than one argument\nc() function has many uses\nAssigning things to our objects “<-”\nas.numeric turns strings into numbers"
  },
  {
    "objectID": "posts/week 3 qmd skills /week 3 qmd skill check.html",
    "href": "posts/week 3 qmd skills /week 3 qmd skill check.html",
    "title": "Week 3 qmd skill check",
    "section": "",
    "text": "1. Be able to make a new .qmd document\nYes.I copied my welcome post, and then renamed it\n2. Be able to render a .qmd document\nI was able to do that\n3. Explain the difference between the source editor view and visual editor view in Rstudio.\nSource editor is where you usually do coding so it is more like the underlying code , and visual editor kind of already shows how the ouput will look like on webpage and it can be confusing for a beginner\n4. Be able to insert simple markdown plain text (headers, lists, paragraphs), and render the document.\n#This is a Header\nstrikethrough\nthis is bold text\nhttps://quarto.org\n\nunordered list + sub-item 1 + sub-item 2\n\nsub-sub-item 1\n\n\n5. Be aware of resources to help you learn more about markdown options.\nYes\n6. Be able to insert an R code chunk, and show the output in the rendered document.\n\nmacro for quick insert\ncommand-option-i\n\n\n\n[1] 6\n\n\n7. Running R code chunks in a qmd - pressing play- Yes - copy/paste into console - Done - highlight then command-enter (mac) yes - precedence issues (first to last) yes\n8. Be aware of R code chunk options, and how to use eval, messages, error, warning, and echo.\nYes. I used echo in the code chunk above.\n9. Be able to set code chunk options per chunk, and/or for the whole document. Understand rules for precedence (which options will apply if both are set.)\nThere is a couple of code chunks options that you can use for some for example eval=false can be used to just display the function and not evaluate. You can also have a code chunk at the top of the document as well.\n10. Write inline r code.\nToday’s date is 2023-02-15\n11. Explain how the rendering environment is different from the Rstudio environment.\nRstudio environment is more like about how it would look as a website, but Rstudio environment shows all the values and the objects assigned to them.\n12. Be aware of more advanced quarto options for html documents, and try some of the options.\nYes"
  },
  {
    "objectID": "posts/Midterm Project part 2/Midterm part 2.html",
    "href": "posts/Midterm Project part 2/Midterm part 2.html",
    "title": "Midterm Part 2",
    "section": "",
    "text": "#Easier problems\nProblem 1: List all of the odd numbers from 1 to 100. you could use the seq() function How could you do this without using the seq() function? Consider using the mod function %%, which evaluates whether or not there is a remainder when dividing one number by another.\n\nfor (i in 1:100){\n  if(i%%2)\n    print(i)\n}\n\n[1] 1\n[1] 3\n[1] 5\n[1] 7\n[1] 9\n[1] 11\n[1] 13\n[1] 15\n[1] 17\n[1] 19\n[1] 21\n[1] 23\n[1] 25\n[1] 27\n[1] 29\n[1] 31\n[1] 33\n[1] 35\n[1] 37\n[1] 39\n[1] 41\n[1] 43\n[1] 45\n[1] 47\n[1] 49\n[1] 51\n[1] 53\n[1] 55\n[1] 57\n[1] 59\n[1] 61\n[1] 63\n[1] 65\n[1] 67\n[1] 69\n[1] 71\n[1] 73\n[1] 75\n[1] 77\n[1] 79\n[1] 81\n[1] 83\n[1] 85\n[1] 87\n[1] 89\n[1] 91\n[1] 93\n[1] 95\n[1] 97\n[1] 99\n\n\nProblem 2 : Generate 100 random numbers within a specific range runif can do this\n\nrunif(100,1,100)\n\n  [1] 30.222472 93.567743 36.232885 69.949103 64.563197 22.019401 52.399502\n  [8] 15.043179 12.049268 91.973133 19.609303 39.749076 85.965852 92.235833\n [15]  2.895495 75.892327 37.615594 31.488459 59.517262 45.457157 97.679933\n [22] 85.342722 24.823293 37.668531 83.458579 79.934745 90.588327 81.115082\n [29] 64.004318 26.808619 89.912948 75.324574 80.562634 58.355944 38.665207\n [36]  8.986238 20.627220 29.041002 99.595672 30.495636 40.850991 77.760102\n [43] 92.201058  9.246302 75.194512  7.516429 93.985724 13.858287 34.761183\n [50] 76.732422 20.081479 21.130343 50.367202 78.267177 26.827810 37.022715\n [57] 26.730951 91.829379 69.407887 28.386385 97.415568 17.624151 16.447443\n [64] 90.515813 28.395888 24.770430 30.012986 51.032135 23.506165 30.313514\n [71] 87.324081 74.750038 69.641397 29.539875 21.837890 86.503958 47.331038\n [78] 10.183781 19.761951 26.613524  4.126844 64.449727 46.178960  5.621999\n [85] 50.323605 61.176823 23.171912  9.932054 73.606289 39.548958 83.581238\n [92] 83.521091  9.723813 94.281285 25.654930 62.361003 71.530971 45.322022\n [99] 99.829445 39.065537\n\n\nProblem 3: Create a variable that stores a 20x20 matrix of random numbers\n\nrandom_num <-matrix(runif(400, min=3,max=45), nrow = 20, ncol=20)\n\n#Harder problems\nProblem 1: FizzBuzz List the numbers from 1 to 100 with the following constraints.\nThis question can be solved using for loop and if else statements\n\nfizzb <- c(1:100)\nfor (i in 1:length(fizzb)){\n  fizzb[i] <-i\n  if(i%%3 == 0 & i%%5== 0){\n    fizzb[i] =\"FizzBuzz\"\n  } else if (i%%3 ==0){\n    fizzb[i] =\"Fizz\"\n  }\nelse if (i%%5 ==0 )\n  fizzb[i] = \"Buzz\"\n}\n\nProblem 2:\n\na<-runif(10000000,0,100)\nhist(a)\n\n\n\n\nProblem 3: Assume that a pair of dice are rolled. Using monte carlo-simulation, compute the probabilities of rolling a 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, and 12, respectively.\n\ndice1 <- replicate(1000,(sample(1:6,1,replace= TRUE)))\ndice2 <-replicate(1000,(sample(1:6,1,replace= TRUE)))\nsim <- c()\ncombined <- dice1+dice2\nsim <- table(combined)/1000\n\nProblem 4: Multiplication table\nGenerate a matrix for a multiplication table. For example, the labels for the columns could be the numbers 1 to 10, and the labels for the rows could be the numbers 1 to 10. The contents of each of the cells in the matrix should be correct answer for multiplying the column value by the row value.\n\nmultiplication_table <-matrix(NA, nrow=10, ncol=10)\ncolnames(multiplication_table) <- c(\"1\", \"2\", \"3\" ,\"4\", \"5\", \"6\", \"7\",\"8\",\"9\",\"10\")\n\nrownames(multiplication_table) <- c(\"1\", \"2\", \"3\" ,\"4\", \"5\", \"6\", \"7\",\"8\",\"9\",\"10\")\n\nfor(i in 1:10) {\n  for(j in 1:10) {\n   multiplication_table[i, j] = (i*j)\n  }\n}\n\nProblem 5:\nsnakes and ladders. how do you add in a representaion of the board, so that you change which square the player is on depending on whether they land on a ladder or snake.\ntry solving the problem in a simpler way . like maybe roll. dice for ladder\n\nsave_rolls <- c()\nfor(sims in 1:1000){\n    total_sum<-0\n    number_of_rolls<-0\n    curpos <-0\n    ladder <- c(3:11, 6:17,9:18,10:12)\n    snakes <- c(14:4, 19:8, 22:20, 24:16)\n  while(total_sum < 25){\n    total_sum <-total_sum+sample(c(1,2,3,4,5,6),1)\n      if (curpos %in% snakes) {\n       curpos <- curpos +1  }\n      if (curpos %in% ladder){\n       curpos <- curpos +1\n  }\n  number_of_rolls <- number_of_rolls+1\n\n}\nsave_rolls[sims] <- number_of_rolls\n}\nmean(save_rolls)\n\n[1] 7.636"
  },
  {
    "objectID": "posts/Midterm Project part 1/Midterm project part 1.html",
    "href": "posts/Midterm Project part 1/Midterm project part 1.html",
    "title": "Midterm project part 1",
    "section": "",
    "text": "Q. Write a blog post where you demonstrate your ability to use these basic programming concepts in R.\n1. R objects: show that you understand and can create/use objects of various types, including at least: character/string, numeric, integer, logical, data.frame, and list. Show that you can index objects appropriately (e.g., locate elements of an object, change elements of an object etc.)\n2. Logical operations: show that you understand and can use logical operators in R (e.g., == | > < >= <=)\n3. Loops: Show that you understand the components of a for loop, and that you can use a for loop.\nThere are three types of loops, for loop, while loop and repeat loops. For loop is the commonly used loop. The syntax is\n\nj <- c(3,6,7,8)\nfor (i in j ){\n  i<- i^2 \n  print(i)\n}\n\n[1] 9\n[1] 36\n[1] 49\n[1] 64\n\n\n4. Functions: Show that you understand the syntax for declaring your own function, and that you can declare and run your own custom function to accomplish some task (you choose what the function does)."
  },
  {
    "objectID": "posts/Data Visualization/Data Visual.html",
    "href": "posts/Data Visualization/Data Visual.html",
    "title": "Data Vis",
    "section": "",
    "text": "#Data types\nThere are different data types in R: numeric, character, and logical\nNumeric data\nIt has two type: integer and double\nIntegers do not have decimal point and double do.\n\nnumeric_data <-c(10.4,7,4) #DOUBLE\ntypeof(numeric_data[1])\n\n[1] \"double\"\n\ntypeof(numeric_data[2])\n\n[1] \"double\"\n\ntypeof(numeric_data[3])\n\n[1] \"double\"\n\nis.numeric(numeric_data[3]) #to check the data type. retuns false or true\n\n[1] TRUE\n\ntypeof(7L)\n\n[1] \"integer\"\n\n\nCharacter data\nCharacters are also called strings. Anything between quotation marks “” is treated as character\n\ntypeof(\"what is the date today?\") #tells the type of data\n\n[1] \"character\"\n\nmy_string <- \"The instructor said, \\\"R is cool,\\\" and the class agreed.\"\ncat(my_string) # cat() prints the arguments\n\nThe instructor said, \"R is cool,\" and the class agreed.\n\n\nLogical\n\nx<- c(4,5,6,7) #this one asks if 7 is found in the object x\n 7 %in% x \n\n[1] TRUE\n\nclass(TRUE) #it tells that the class of true is logical\n\n[1] \"logical\"\n\n\nFactor data When you use factor, you are telling R that this is categorical data with levels. This can be very helpful in various types of statistical analysis.\n\nmyfactor <- factor(\"B\", levels = c(\"A\", \"B\",\"C\")) # B is a factor which has three levels A,B and C\nmyfactor \n\n[1] B\nLevels: A B C\n\n\n#Tidy data\nUntidy data can be hard for us and the computer to read and do anlaysis on it. In tidy data, every column is variable, every row is an observation and every cell is a single value.\n\nuntidy_data <- read.csv(\"CopyOfdata/untidy_data.csv\")\n\n\nuntidy_data\n\n  customer_id itemsprice_2018 itemsprice_2019 itemsprice_2020 totalprice_2018\n1           1        2 (3.91)        8 (4.72)       10 (5.59)            7.82\n2           2        1 (3.91)        6 (4.72)        1 (5.59)            3.91\n3           3        4 (3.91)        5 (4.72)        5 (5.59)           15.64\n4           4       10 (3.91)        1 (4.72)        3 (5.59)           39.10\n5           5        3 (3.91)        9 (4.72)        8 (5.59)           11.73\n  totalprice_2019 totalprice_2020\n1           37.76           55.90\n2           28.32            5.59\n3           23.60           27.95\n4            4.72           16.77\n5           42.48           44.72\n\n#This is an example of untidy data. \n#It shows that itemprice has two values in each cell\n#It is hard to read as it shows the data for all three years repeatedly which can be confusing to analyze.\n\n\ntidy_data <- read.csv(\"CopyOfdata/tidy_data.csv\")\n\ntidy_data #This is an example of tidy data. It shows how each observatio ihas its own row and each value has its own cell.\n\n   customer_id year items price_per_item totalprice\n1            1 2018     2           3.91       7.82\n2            1 2019     8           4.72      37.76\n3            1 2020    10           5.59      55.90\n4            2 2018     1           3.91       3.91\n5            2 2019     6           4.72      28.32\n6            2 2020     1           5.59       5.59\n7            3 2018     4           3.91      15.64\n8            3 2019     5           4.72      23.60\n9            3 2020     5           5.59      27.95\n10           4 2018    10           3.91      39.10\n11           4 2019     1           4.72       4.72\n12           4 2020     3           5.59      16.77\n13           5 2018     3           3.91      11.73\n14           5 2019     9           4.72      42.48\n15           5 2020     8           5.59      44.72\n\n\n#GGplot\n\nlibrary(ggplot2)\n\nsurvey_data <- read.csv(\"https://psyteachr.github.io/ads-v2/data/survey_data.csv\")\n\nsurvey_ggplot <- ggplot(survey_data, aes(x = wait_time, y = call_time)) +\n  geom_point(colour= \"red\") +\n  geom_smooth(method =lm) + \n  \n  scale_x_continuous(name = \"Wait Time (seconds)\",\n                     breaks = seq(from=0, to= 600, by=60))+\n  \n  scale_y_continuous(name = \"Call time (seconds)\",\n                     breaks = seq(from = 0, to = 600, by = 30))+\n  labs(title = \"The relationship between wait time and call time\",\n       subtitle = \"2020 Call Data\",\n       caption = \"Figure 1. As wait time increases, call time increases.\")\n  \n\n\nsurvey_ggplot\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "posts/CopyOfMidterm Project part 2/Midterm part 2.html",
    "href": "posts/CopyOfMidterm Project part 2/Midterm part 2.html",
    "title": "Midterm Part 2",
    "section": "",
    "text": "#Easier problems\nProblem 1: List all of the odd numbers from 1 to 100. you could use the seq() function How could you do this without using the seq() function? Consider using the mod function %%, which evaluates whether or not there is a remainder when dividing one number by another.\n\nfor (i in 1:100){\n  if(i%%2)\n    print(i)\n}\n\n[1] 1\n[1] 3\n[1] 5\n[1] 7\n[1] 9\n[1] 11\n[1] 13\n[1] 15\n[1] 17\n[1] 19\n[1] 21\n[1] 23\n[1] 25\n[1] 27\n[1] 29\n[1] 31\n[1] 33\n[1] 35\n[1] 37\n[1] 39\n[1] 41\n[1] 43\n[1] 45\n[1] 47\n[1] 49\n[1] 51\n[1] 53\n[1] 55\n[1] 57\n[1] 59\n[1] 61\n[1] 63\n[1] 65\n[1] 67\n[1] 69\n[1] 71\n[1] 73\n[1] 75\n[1] 77\n[1] 79\n[1] 81\n[1] 83\n[1] 85\n[1] 87\n[1] 89\n[1] 91\n[1] 93\n[1] 95\n[1] 97\n[1] 99\n\n\nProblem 2 : Generate 100 random numbers within a specific range runif can do this\n\nrunif(100,1,100)\n\n  [1] 15.889277 59.136397 64.822341 43.422642 52.547811 31.898228 73.819200\n  [8] 93.587851 44.307231 33.382910 23.205881 16.521188 56.319771  6.621819\n [15] 61.383689 22.213767 27.762229 68.549349 48.884195 30.628755 43.425576\n [22] 25.676630 17.814282  1.306124 42.114243 29.576867 38.094581 84.765508\n [29] 12.716311 96.428840 54.983269 64.242936 86.840717 66.528984 44.053079\n [36] 23.490570 41.020487 28.515237 13.657993 85.395037 63.852282 12.739961\n [43] 58.434300 91.096981 51.807013 43.824768  7.599941 48.173916 82.922199\n [50]  9.355915 24.538731 12.121493  2.934625 76.308445 71.625870 65.128533\n [57] 98.523264 99.868982 76.469857 52.450124 72.703304 85.776402 40.616870\n [64] 23.038685 43.390797 29.680340 42.503802 89.671145 18.112930 50.836173\n [71] 57.099333 31.892689 85.486740 44.886170 46.738857 31.034709 52.570192\n [78] 65.794401  2.725048 77.852667 39.005632 54.076517 64.377173 49.607638\n [85] 80.608808 96.151022 48.009768  9.564355 19.966706 94.325005 38.224029\n [92] 59.321321  8.735454 69.996591 56.979235 32.775390 92.214612 17.144312\n [99] 25.323213 41.004843\n\n\nProblem 3: Create a variable that stores a 20x20 matrix of random numbers\n\nrandom_num <-matrix(runif(400, min=3,max=45), nrow = 20, ncol=20)\n\n#Harder problems\nProblem 1: FizzBuzz List the numbers from 1 to 100 with the following constraints.\nThis question can be solved using for loop and if else statements\n\nfizzb <- c(1:100)\nfor (i in 1:length(fizzb)){\n  fizzb[i] <-i\n  if(i%%3 == 0 & i%%5== 0){\n    fizzb[i] =\"FizzBuzz\"\n  } else if (i%%3 ==0){\n    fizzb[i] =\"Fizz\"\n  }\nelse if (i%%5 ==0 )\n  fizzb[i] = \"Buzz\"\n}\n\nProblem 2:\n\na<-runif(10000000,0,100)\nhist(a)\n\n\n\n\nProblem 3: Assume that a pair of dice are rolled. Using monte carlo-simulation, compute the probabilities of rolling a 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, and 12, respectively.\n\ndice1 <- replicate(1000,(sample(1:6,1,replace= TRUE)))\ndice2 <-replicate(1000,(sample(1:6,1,replace= TRUE)))\nsim <- c()\ncombined <- dice1+dice2\nsim <- table(combined)/1000\n\nProblem 4: Multiplication table\nGenerate a matrix for a multiplication table. For example, the labels for the columns could be the numbers 1 to 10, and the labels for the rows could be the numbers 1 to 10. The contents of each of the cells in the matrix should be correct answer for multiplying the column value by the row value.\n\nmultiplication_table <-matrix(NA, nrow=10, ncol=10)\ncolnames(multiplication_table) <- c(\"1\", \"2\", \"3\" ,\"4\", \"5\", \"6\", \"7\",\"8\",\"9\",\"10\")\n\nrownames(multiplication_table) <- c(\"1\", \"2\", \"3\" ,\"4\", \"5\", \"6\", \"7\",\"8\",\"9\",\"10\")\n\nfor(i in 1:10) {\n  for(j in 1:10) {\n   multiplication_table[i, j] = (i*j)\n  }\n}\n\nProblem 5:\nsnakes and ladders. how do you add in a representaion of the board, so that you change which square the player is on depending on whether they land on a ladder or snake.\ntry solving the problem in a simpler way . like maybe roll. dice for ladder\n\nsave_rolls <- c()\nfor(sims in 1:1000){\n    total_sum<-0\n    number_of_rolls<-0\n    curpos <-0\n    ladder <- c(3:11, 6:17,9:18,10:12)\n    snakes <- c(14:4, 19:8, 22:20, 24:16)\n  while(total_sum < 25){\n    total_sum <-total_sum+sample(c(1,2,3,4,5,6),1)\n      if (curpos %in% snakes) {\n       curpos = curpos +1  }\n      if (curpos %in% ladder){\n       curpos = curpos +1\n  }\n  number_of_rolls <- number_of_rolls+1\n\n}\nsave_rolls[sims] <- number_of_rolls\n}\nmean(save_rolls)\n\n[1] 7.684"
  },
  {
    "objectID": "posts/CopyOfData Visualization/Data Visual.html",
    "href": "posts/CopyOfData Visualization/Data Visual.html",
    "title": "Data Vis",
    "section": "",
    "text": "#Data types\nThere are different data types in R: numeric, character, and logical\nNumeric data\nIt has two type: integer and double\nIntegers do not have decimal point and double do.\n\nnumeric_data <-c(10.4,7,4) #DOUBLE\ntypeof(numeric_data[1])\n\n[1] \"double\"\n\ntypeof(numeric_data[2])\n\n[1] \"double\"\n\ntypeof(numeric_data[3])\n\n[1] \"double\"\n\nis.numeric(numeric_data[3]) #to check the data type. retuns false or true\n\n[1] TRUE\n\ntypeof(7L)\n\n[1] \"integer\"\n\n\nCharacter data\nCharacters are also called strings. Anything between quotation marks “” is treated as character\n\ntypeof(\"what is the date today?\") #tells the type of data\n\n[1] \"character\"\n\nmy_string <- \"The instructor said, \\\"R is cool,\\\" and the class agreed.\"\ncat(my_string) # cat() prints the arguments\n\nThe instructor said, \"R is cool,\" and the class agreed.\n\n\nLogical\n\nx<- c(4,5,6,7) #this one asks if 7 is found in the object x\n 7 %in% x \n\n[1] TRUE\n\nclass(TRUE) #it tells that the class of true is logical\n\n[1] \"logical\"\n\n\nFactor data When you use factor, you are telling R that this is categorical data with levels. This can be very helpful in various types of statistical analysis.\n\nmyfactor <- factor(\"B\", levels = c(\"A\", \"B\",\"C\")) # B is a factor which has three levels A,B and C\nmyfactor \n\n[1] B\nLevels: A B C\n\n\n#Tidy data\nUntidy data can be hard for us and the computer to read and do anlaysis on it. In tidy data, every column is variable, every row is an observation and every cell is a single value.\n\nuntidy_data <- read.csv(\"CopyOfdata/untidy_data.csv\")\n\n\nuntidy_data\n\n  customer_id itemsprice_2018 itemsprice_2019 itemsprice_2020 totalprice_2018\n1           1        2 (3.91)        8 (4.72)       10 (5.59)            7.82\n2           2        1 (3.91)        6 (4.72)        1 (5.59)            3.91\n3           3        4 (3.91)        5 (4.72)        5 (5.59)           15.64\n4           4       10 (3.91)        1 (4.72)        3 (5.59)           39.10\n5           5        3 (3.91)        9 (4.72)        8 (5.59)           11.73\n  totalprice_2019 totalprice_2020\n1           37.76           55.90\n2           28.32            5.59\n3           23.60           27.95\n4            4.72           16.77\n5           42.48           44.72\n\n#This is an example of untidy data. \n#It shows that itemprice has two values in each cell\n#It is hard to read as it shows the data for all three years repeatedly which can be confusing to analyze.\n\n\ntidy_data <- read.csv(\"CopyOfdata/tidy_data.csv\")\n\ntidy_data #This is an example of tidy data. It shows how each observatio ihas its own row and each value has its own cell.\n\n   customer_id year items price_per_item totalprice\n1            1 2018     2           3.91       7.82\n2            1 2019     8           4.72      37.76\n3            1 2020    10           5.59      55.90\n4            2 2018     1           3.91       3.91\n5            2 2019     6           4.72      28.32\n6            2 2020     1           5.59       5.59\n7            3 2018     4           3.91      15.64\n8            3 2019     5           4.72      23.60\n9            3 2020     5           5.59      27.95\n10           4 2018    10           3.91      39.10\n11           4 2019     1           4.72       4.72\n12           4 2020     3           5.59      16.77\n13           5 2018     3           3.91      11.73\n14           5 2019     9           4.72      42.48\n15           5 2020     8           5.59      44.72\n\n\n#GGplot\n\nlibrary(ggplot2)\n\nsurvey_data <- read.csv(\"https://psyteachr.github.io/ads-v2/data/survey_data.csv\")\n\nsurvey_ggplot <- ggplot(survey_data, aes(x = wait_time, y = call_time)) +\n  geom_point(colour= \"red\") +\n  geom_smooth(method =lm) + \n  \n  scale_x_continuous(name = \"Wait Time (seconds)\",\n                     breaks = seq(from=0, to= 600, by=60))+\n  \n  scale_y_continuous(name = \"Call time (seconds)\",\n                     breaks = seq(from = 0, to = 600, by = 30))+\n  labs(title = \"The relationship between wait time and call time\",\n       subtitle = \"2020 Call Data\",\n       caption = \"Figure 1. As wait time increases, call time increases.\")\n  \n\n\nsurvey_ggplot\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n```"
  }
]