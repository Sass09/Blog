[
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Blog",
    "section": "",
    "text": "Week 3 qmd skill check\n\n\n\n\n\n\n\n\n\n\n\n\nShifa Maqsood\n\n\n\n\n\n\n  \n\n\n\n\nNotes for class\n\n\n\n\n\n\n\n\n\n\n\n\nShifa\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Data Analytics Blog",
    "section": "",
    "text": "This blog is for weekly assignments"
  },
  {
    "objectID": "posts/new/index.html",
    "href": "posts/new/index.html",
    "title": "Notes for class",
    "section": "",
    "text": "Learn more about push and pull about git\nmake a change, commit and push the change.\nMake changes to you to ur file.\nRender your websites.\nCommit the changes.\nPush to the origin\nRstudio IDE is a great resource.\nA reproducible report allows others to understand and check your work.\nnever install a package inside of the script\nthere is another easy way to use a function. You can simply use package::function()\nWhenever you put comma in a function, it means you are giving different arguments to it. For example, mean(x=1,2,3,4,5) means more than one argument"
  },
  {
    "objectID": "posts/week 3 qmd skills /index.html",
    "href": "posts/week 3 qmd skills /index.html",
    "title": "Week 3 qmd skills",
    "section": "",
    "text": "Be able to make a new .qmd document\nBe able to render a .qmd document\nBe able to insert simple markdown plain text (headers, lists, paragraphs), and render the document.\n\n#This is a first level header ##This is a second level header 4. Be aware of resources to help you learn more about markdown options. 5. Be able to insert an R code chunk, and show the output in the rendered document. - macro for quick insert 6. Running R code chunks in a qmd - pressing play - copy/paste into console - highlight then command-enter (mac) - precedence issues (first to last) 7. Be aware of R code chunk options, and how to use eval, messages, error, warning, and echo. 8. Be able to set code chunk options per chunk, and/or for the whole document. Understand rules for precedence (which options will apply if both are set.) 9. Write inline r code. 10. Explain how the rendering environment is different from the Rstudio environment. 11. Be aware of more advanced quarto options for html documents, and try some of the options."
  },
  {
    "objectID": "posts/Tipsheet post /index.html",
    "href": "posts/Tipsheet post /index.html",
    "title": "Notes for class",
    "section": "",
    "text": "Learn more about push and pull about git\nmake a change, commit and push the change.\nMake changes to you to ur file.\nRender your websites.\nCommit the changes.\nPush to the origin\nRstudio IDE is a great resource.\nA reproducible report allows others to understand and check your work.\nnever install a package inside of the script\nthere is another easy way to use a function. You can simply use package::function()\nWhenever you put comma in a function, it means you are giving different arguments to it. For example, mean(x=1,2,3,4,5) means more than one argument\nc() function has many uses\nAssigning things to our objects “<-”\nas.numeric turns strings into numbers"
  },
  {
    "objectID": "posts/week 3 qmd skills /week 3 qmd skill check.html",
    "href": "posts/week 3 qmd skills /week 3 qmd skill check.html",
    "title": "Week 3 qmd skill check",
    "section": "",
    "text": "1. Be able to make a new .qmd document\nYes.I copied my welcome post, and then renamed it\n2. Be able to render a .qmd document\nI was able to do that\n3. Explain the difference between the source editor view and visual editor view in Rstudio.\nSource editor is where you usually do coding so it is more like the underlying code , and visual editor kind of already shows how the ouput will look like on webpage and it can be confusing for a beginner\n4. Be able to insert simple markdown plain text (headers, lists, paragraphs), and render the document.\n#This is a Header\nstrikethrough\nthis is bold text\nhttps://quarto.org\n\nunordered list + sub-item 1 + sub-item 2\n\nsub-sub-item 1\n\n\n5. Be aware of resources to help you learn more about markdown options.\nYes\n6. Be able to insert an R code chunk, and show the output in the rendered document.\n\nmacro for quick insert\ncommand-option-i\n\n\n\n[1] 6\n\n\n7. Running R code chunks in a qmd - pressing play- Yes - copy/paste into console - Done - highlight then command-enter (mac) yes - precedence issues (first to last) yes\n8. Be aware of R code chunk options, and how to use eval, messages, error, warning, and echo.\nYes. I used echo in the code chunk above.\n9. Be able to set code chunk options per chunk, and/or for the whole document. Understand rules for precedence (which options will apply if both are set.)\nThere is a couple of code chunks options that you can use for some for example eval=false can be used to just display the function and not evaluate. You can also have a code chunk at the top of the document as well.\n10. Write inline r code.\nToday’s date is 2023-02-15\n11. Explain how the rendering environment is different from the Rstudio environment.\nRstudio environment is more like about how it would look as a website, but Rstudio environment shows all the values and the objects assigned to them.\n12. Be aware of more advanced quarto options for html documents, and try some of the options.\nYes"
  }
]