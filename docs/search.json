[
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "posts",
    "section": "",
    "text": "Data Import\n\n\n\n\n\n\n\n\n\n\n\n\nShifa Maqsood\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nData Summaries\n\n\n\n\n\n\n\n\n\n\n\n\nShifa Maqsood\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nData Wrangling\n\n\n\n\n\n\n\n\n\n\n\n\nShifa Maqsood\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCustomization\n\n\n\n\n\n\n\n\n\n\n\n\nShifa Maqsood\n\n\n\n\n\n\n  \n\n\n\n\nMidterm Part 2\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\nData Vis\n\n\n\n\n\n\n\n\n\n\n\n\nShifa Maqsood\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nVideo game review report\n\n\n\n\n\n\n\n\n\n\n\n\nshifa Maqsood\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTidy Tuesday\n\n\n\n\n\n\n\n\n\n\n\n\nShifa Maqsood\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 3 qmd skill check\n\n\n\n\n\n\n\n\n\n\n\n\nShifa Maqsood\n\n\n\n\n\n\n  \n\n\n\n\nNotes for class\n\n\n\n\n\n\n\n\n\n\n\n\nShifa Maqsood\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReveal Js\n\n\n\n\n\n\n\n\n\n\n\n\nShifa Maqsood\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nData Relations\n\n\n\n\n\n\n\n\n\n\n\n\nShifa Maqsood\n\n\n\n\n\n\n  \n\n\n\n\nMidterm project part 1\n\n\n\n\n\n\n\n\n\n\n\n\nShifa Maqsood\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFinal Report (Tidy Tuesday)\n\n\n\n\n\n\n\n\n\n\n\n\nShifa Maqsood\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nData Tidying\n\n\n\n\n\n\n\n\n\n\n\n\nShifa Maqsood\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMore ggplot\n\n\n\n\n\n\n\n\n\n\n\n\nShifa Maqsood\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Data Analytics Blog",
    "section": "",
    "text": "This blog is for weekly assignments"
  },
  {
    "objectID": "posts/new/index.html",
    "href": "posts/new/index.html",
    "title": "Notes for class",
    "section": "",
    "text": "Learn more about push and pull about git\nmake a change, commit and push the change.\nMake changes to you to ur file.\nRender your websites.\nCommit the changes.\nPush to the origin\nRstudio IDE is a great resource.\nA reproducible report allows others to understand and check your work.\nnever install a package inside of the script\nthere is another easy way to use a function. You can simply use package::function()\nWhenever you put comma in a function, it means you are giving different arguments to it. For example, mean(x=1,2,3,4,5) means more than one argument"
  },
  {
    "objectID": "posts/week 3 qmd skills /index.html",
    "href": "posts/week 3 qmd skills /index.html",
    "title": "Week 3 qmd skills",
    "section": "",
    "text": "Be able to make a new .qmd document\nBe able to render a .qmd document\nBe able to insert simple markdown plain text (headers, lists, paragraphs), and render the document.\n\n#This is a first level header ##This is a second level header 4. Be aware of resources to help you learn more about markdown options. 5. Be able to insert an R code chunk, and show the output in the rendered document. - macro for quick insert 6. Running R code chunks in a qmd - pressing play - copy/paste into console - highlight then command-enter (mac) - precedence issues (first to last) 7. Be aware of R code chunk options, and how to use eval, messages, error, warning, and echo. 8. Be able to set code chunk options per chunk, and/or for the whole document. Understand rules for precedence (which options will apply if both are set.) 9. Write inline r code. 10. Explain how the rendering environment is different from the Rstudio environment. 11. Be aware of more advanced quarto options for html documents, and try some of the options."
  },
  {
    "objectID": "posts/Tipsheet post /index.html",
    "href": "posts/Tipsheet post /index.html",
    "title": "Notes for class",
    "section": "",
    "text": "Learn more about push and pull about git\nmake a change, commit and push the change.\nMake changes to you to ur file.\nRender your websites.\nCommit the changes.\nPush to the origin\nRstudio IDE is a great resource.\nA reproducible report allows others to understand and check your work.\nnever install a package inside of the script\nthere is another easy way to use a function. You can simply use package::function()\nWhenever you put comma in a function, it means you are giving different arguments to it. For example, mean(x=1,2,3,4,5) means more than one argument\nc() function has many uses\nAssigning things to our objects “<-”\nas.numeric turns strings into numbers"
  },
  {
    "objectID": "posts/week 3 qmd skills /week 3 qmd skill check.html",
    "href": "posts/week 3 qmd skills /week 3 qmd skill check.html",
    "title": "Week 3 qmd skill check",
    "section": "",
    "text": "1. Be able to make a new .qmd document\nYes.I copied my welcome post, and then renamed it\n2. Be able to render a .qmd document\nI was able to do that\n3. Explain the difference between the source editor view and visual editor view in Rstudio.\nSource editor is where you usually do coding so it is more like the underlying code , and visual editor kind of already shows how the ouput will look like on webpage and it can be confusing for a beginner\n4. Be able to insert simple markdown plain text (headers, lists, paragraphs), and render the document.\n#This is a Header\nstrikethrough\nthis is bold text\nhttps://quarto.org\n\nunordered list + sub-item 1 + sub-item 2\n\nsub-sub-item 1\n\n\n5. Be aware of resources to help you learn more about markdown options.\nYes\n6. Be able to insert an R code chunk, and show the output in the rendered document.\n\nmacro for quick insert\ncommand-option-i\n\n\n\n[1] 6\n\n\n7. Running R code chunks in a qmd - pressing play- Yes - copy/paste into console - Done - highlight then command-enter (mac) yes - precedence issues (first to last) yes\n8. Be aware of R code chunk options, and how to use eval, messages, error, warning, and echo.\nYes. I used echo in the code chunk above.\n9. Be able to set code chunk options per chunk, and/or for the whole document. Understand rules for precedence (which options will apply if both are set.)\nThere is a couple of code chunks options that you can use for some for example eval=false can be used to just display the function and not evaluate. You can also have a code chunk at the top of the document as well.\n10. Write inline r code.\nToday’s date is 2023-02-15\n11. Explain how the rendering environment is different from the Rstudio environment.\nRstudio environment is more like about how it would look as a website, but Rstudio environment shows all the values and the objects assigned to them.\n12. Be aware of more advanced quarto options for html documents, and try some of the options.\nYes"
  },
  {
    "objectID": "posts/Midterm Project part 2/Midterm part 2.html",
    "href": "posts/Midterm Project part 2/Midterm part 2.html",
    "title": "Midterm Part 2",
    "section": "",
    "text": "#Easier problems\nProblem 1: List all of the odd numbers from 1 to 100. you could use the seq() function How could you do this without using the seq() function? Consider using the mod function %%, which evaluates whether or not there is a remainder when dividing one number by another.\n\nfor (i in 1:100){\n  if(i%%2)\n    print(i)\n}\n\n[1] 1\n[1] 3\n[1] 5\n[1] 7\n[1] 9\n[1] 11\n[1] 13\n[1] 15\n[1] 17\n[1] 19\n[1] 21\n[1] 23\n[1] 25\n[1] 27\n[1] 29\n[1] 31\n[1] 33\n[1] 35\n[1] 37\n[1] 39\n[1] 41\n[1] 43\n[1] 45\n[1] 47\n[1] 49\n[1] 51\n[1] 53\n[1] 55\n[1] 57\n[1] 59\n[1] 61\n[1] 63\n[1] 65\n[1] 67\n[1] 69\n[1] 71\n[1] 73\n[1] 75\n[1] 77\n[1] 79\n[1] 81\n[1] 83\n[1] 85\n[1] 87\n[1] 89\n[1] 91\n[1] 93\n[1] 95\n[1] 97\n[1] 99\n\n\nProblem 2 : Generate 100 random numbers within a specific range runif can do this\n\nrunif(100,1,100)\n\n  [1] 33.120829 11.896967 19.415353 50.589755 77.228669 95.622781  3.669065\n  [8] 76.852002 60.223599 27.964026 67.960080 19.905128 46.424167 61.918571\n [15] 92.148127 34.197386 97.503413 98.473695 74.130158 61.312863  5.291779\n [22]  4.008336  9.421220  7.582252 43.291974 57.419260 32.246282 25.090425\n [29] 70.237259 30.173052 14.526447 21.574690 58.541599 57.236245 33.095637\n [36]  6.809637 11.677427 13.039047 66.440271 15.659806  1.712580  4.729164\n [43] 78.420404 81.791119 69.453659 15.717039 65.732153 57.535243 61.204469\n [50] 52.919830 59.841390 61.423579 47.937576 15.025014 97.023658 90.946999\n [57]  6.591146 45.635287 14.015059 75.121684 33.768011 95.946949 79.831672\n [64] 87.956409 83.932712 41.167302 77.054032 30.925421 81.893093 21.682476\n [71] 59.232083 40.364756 35.998782 86.572747 65.326694 56.946283 48.053602\n [78]  8.832390 48.715849 58.778630 54.986016 88.088183 81.392389 57.200159\n [85] 68.454320  9.872646  1.913512 72.759080 22.786283 84.941448 86.661339\n [92] 43.678315 10.394851 99.809831 93.434756 91.698799 83.654608  4.847305\n [99]  4.931941 99.281867\n\n\nProblem 3: Create a variable that stores a 20x20 matrix of random numbers\n\nrandom_num <-matrix(runif(400, min=3,max=45), nrow = 20, ncol=20)\n\n#Harder problems\nProblem 1: FizzBuzz List the numbers from 1 to 100 with the following constraints.\nThis question can be solved using for loop and if else statements\n\nfizzb <- c(1:100)\nfor (i in 1:length(fizzb)){\n  fizzb[i] <-i\n  if(i%%3 == 0 & i%%5== 0){\n    fizzb[i] =\"FizzBuzz\"\n  } else if (i%%3 ==0){\n    fizzb[i] =\"Fizz\"\n  }\nelse if (i%%5 ==0 )\n  fizzb[i] = \"Buzz\"\n}\n\nProblem 2: Assume that a pair of dice are rolled. Using monte carlo-simulation, compute the probabilities of rolling a 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, and 12, respectively.\n\ndice1 <- replicate(1000,(sample(1:6,1,replace= TRUE)))\ndice2 <-replicate(1000,(sample(1:6,1,replace= TRUE)))\nsim <- c()\ncombined <- dice1+dice2\nsim <- table(combined)/1000\n\nProblem 3: Multiplication table\nGenerate a matrix for a multiplication table. For example, the labels for the columns could be the numbers 1 to 10, and the labels for the rows could be the numbers 1 to 10. The contents of each of the cells in the matrix should be correct answer for multiplying the column value by the row value.\n\nmultiplication_table <-matrix(NA, nrow=10, ncol=10)\ncolnames(multiplication_table) <- c(\"1\", \"2\", \"3\" ,\"4\", \"5\", \"6\", \"7\",\"8\",\"9\",\"10\")\n\nrownames(multiplication_table) <- c(\"1\", \"2\", \"3\" ,\"4\", \"5\", \"6\", \"7\",\"8\",\"9\",\"10\")\n\nfor(i in 1:10) {\n  for(j in 1:10) {\n   multiplication_table[i, j] = (i*j)\n  }\n}\n\nProblem 4:\nsnakes and ladders. how do you add in a representaion of the board, so that you change which square the player is on depending on whether they land on a ladder or snake.\ntry doing it for one ladder\nso i could do something like if number of roll is ==3 then do this cuz curpos is not interacting with my dice roll\n\nsave_rolls <- c()\nfor(sims in 1:100){\ncurpos<-0\nnumber_of_rolls<-0\n\nwhile(curpos < 25){\n    curpos <- curpos+sample(c(1,2,3,4,5,6),1)\n   if (curpos == 3){\n     curpos <-11\n   }\n    if (curpos == 6){\n      curpos <- 17\n    }\n    if (curpos == 10){\n      curpos <- 12\n    }\n    if (curpos == 14){\n      curpos <- 4\n    }\n    if (curpos ==19){\n      curpos <-8\n    }\n    if(curpos == 22){\n      curpos <- 20\n    }\n    if (curpos ==24){\n      curpos <- 16\n    }\n  number_of_rolls <- number_of_rolls+1\n}\nsave_rolls[sims] <- number_of_rolls\n}\nmean(save_rolls)\n\n[1] 9.52\n\n\nthe end."
  },
  {
    "objectID": "posts/Midterm Project part 1/Midterm project part 1.html",
    "href": "posts/Midterm Project part 1/Midterm project part 1.html",
    "title": "Midterm project part 1",
    "section": "",
    "text": "Q. Write a blog post where you demonstrate your ability to use these basic programming concepts in R.\n1. R objects: show that you understand and can create/use objects of various types, including at least: character/string, numeric, integer, logical, data.frame, and list. Show that you can index objects appropriately (e.g., locate elements of an object, change elements of an object etc.)\n\nall_kind_of_data <- data.frame(  #this is a  dataframe\n  characterss= c(\"hello\", \"home\", \"sun\"),\n  random.number = c(4L,6L,8L)\n)\n\nclass(all_kind_of_data$characterss) \n\n[1] \"character\"\n\nall_kind_of_data[,1] #indexes the character column \n\n[1] \"hello\" \"home\"  \"sun\"  \n\na <- c(4,6)\nb <-c(7,6)\nc <- a==b #it compares each element and shows if it is TRUE or FALSE \nc\n\n[1] FALSE  TRUE\n\nall_kind_of_data$characterss <- c(\"sun\") #changed the elements inside the dataframe\n\n2. Logical operations: show that you understand and can use logical operators in R (e.g., == | > < >= <=)\n\n16==16 #returns TRUE as 16 is equal to 16\n\n[1] TRUE\n\n5>2\n\n[1] TRUE\n\n5|3\n\n[1] TRUE\n\na <-c(5,7,8,4)\n\na[a>=6] #it means you are finding all values in object a which have values more than 6 \n\n[1] 7 8\n\n\n3. Loops: Show that you understand the components of a for loop, and that you can use a for loop.\nThere are three types of loops, for loop, while loop and repeat loops. For loop is the commonly used loop. The syntax is\n\nj <- c(3,6,7,8)\nfor (i in j ){\n  i<- i^2 \n  print(i)\n}\n\n[1] 9\n[1] 36\n[1] 49\n[1] 64\n\n\n4. Functions: Show that you understand the syntax for declaring your own function, and that you can declare and run your own custom function to accomplish some task (you choose what the function does).\n\nmy_fun <- function(x){\n  random <- x^2\n  return(random)\n}\n\nmy_fun(5)\n\n[1] 25"
  },
  {
    "objectID": "posts/Data Visualization/Data Visual.html",
    "href": "posts/Data Visualization/Data Visual.html",
    "title": "Data Vis",
    "section": "",
    "text": "#Data types\nThere are different data types in R: numeric, character, and logical\nNumeric data\nIt has two type: integer and double\nIntegers do not have decimal point and double do.\n\nnumeric_data <-c(10.4,7,4) #DOUBLE\ntypeof(numeric_data[1])\n\n[1] \"double\"\n\ntypeof(numeric_data[2])\n\n[1] \"double\"\n\ntypeof(numeric_data[3])\n\n[1] \"double\"\n\nis.numeric(numeric_data[3]) #to check the data type. retuns false or true\n\n[1] TRUE\n\ntypeof(7L)\n\n[1] \"integer\"\n\n\nCharacter data\nCharacters are also called strings. Anything between quotation marks “” is treated as character\n\ntypeof(\"what is the date today?\") #tells the type of data\n\n[1] \"character\"\n\nmy_string <- \"The instructor said, \\\"R is cool,\\\" and the class agreed.\"\ncat(my_string) # cat() prints the arguments\n\nThe instructor said, \"R is cool,\" and the class agreed.\n\n\nLogical\n\nx<- c(4,5,6,7) #this one asks if 7 is found in the object x\n 7 %in% x \n\n[1] TRUE\n\nclass(TRUE) #it tells that the class of true is logical\n\n[1] \"logical\"\n\n\nFactor data\nWhen you use factor, you are telling R that this is categorical data with levels. This can be very helpful in various types of statistical analysis.\n\nmyfactor <- factor(\"B\", levels = c(\"A\", \"B\",\"C\")) # B is a factor which has three levels A,B and C\nmyfactor \n\n[1] B\nLevels: A B C\n\n\n#Tidy data\nUntidy data can be hard for us and the computer to read and do anlaysis on it. In tidy data, every column is variable, every row is an observation and every cell is a single value.\n\nuntidy_data <- read.csv(\"CopyOfdata/untidy_data.csv\")\n\n\nuntidy_data\n\n  customer_id itemsprice_2018 itemsprice_2019 itemsprice_2020 totalprice_2018\n1           1        2 (3.91)        8 (4.72)       10 (5.59)            7.82\n2           2        1 (3.91)        6 (4.72)        1 (5.59)            3.91\n3           3        4 (3.91)        5 (4.72)        5 (5.59)           15.64\n4           4       10 (3.91)        1 (4.72)        3 (5.59)           39.10\n5           5        3 (3.91)        9 (4.72)        8 (5.59)           11.73\n  totalprice_2019 totalprice_2020\n1           37.76           55.90\n2           28.32            5.59\n3           23.60           27.95\n4            4.72           16.77\n5           42.48           44.72\n\n#This is an example of untidy data. \n#It shows that itemprice has two values in each cell\n#It is hard to read as it shows the data for all three years repeatedly which can be confusing to analyze.\n\n\ntidy_data <- read.csv(\"CopyOfdata/tidy_data.csv\")\n\ntidy_data #This is an example of tidy data. It shows how each observatio ihas its own row and each value has its own cell.\n\n   customer_id year items price_per_item totalprice\n1            1 2018     2           3.91       7.82\n2            1 2019     8           4.72      37.76\n3            1 2020    10           5.59      55.90\n4            2 2018     1           3.91       3.91\n5            2 2019     6           4.72      28.32\n6            2 2020     1           5.59       5.59\n7            3 2018     4           3.91      15.64\n8            3 2019     5           4.72      23.60\n9            3 2020     5           5.59      27.95\n10           4 2018    10           3.91      39.10\n11           4 2019     1           4.72       4.72\n12           4 2020     3           5.59      16.77\n13           5 2018     3           3.91      11.73\n14           5 2019     9           4.72      42.48\n15           5 2020     8           5.59      44.72\n\n\n#GGplot\n\nlibrary(ggplot2)\n\nsurvey_data <- read.csv(\"https://psyteachr.github.io/ads-v2/data/survey_data.csv\")\n\nsurvey_ggplot <- ggplot(survey_data, aes(x = wait_time, y = call_time)) +\n  geom_point(colour= \"red\") +\n  geom_smooth(method =lm) + \n  \n  scale_x_continuous(name = \"Wait Time (seconds)\",\n                     breaks = seq(from=0, to= 600, by=60))+\n  \n  scale_y_continuous(name = \"Call time (seconds)\",\n                     breaks = seq(from = 0, to = 600, by = 30))+\n  labs(title = \"The relationship between wait time and call time\",\n       subtitle = \"2020 Call Data\",\n       caption = \"Figure 1. As wait time increases, call time increases.\")\n  \n\n\nsurvey_ggplot\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "posts/CopyOfMidterm Project part 2/Midterm part 2.html",
    "href": "posts/CopyOfMidterm Project part 2/Midterm part 2.html",
    "title": "Midterm Part 2",
    "section": "",
    "text": "#Easier problems\nProblem 1: List all of the odd numbers from 1 to 100. you could use the seq() function How could you do this without using the seq() function? Consider using the mod function %%, which evaluates whether or not there is a remainder when dividing one number by another.\n\nfor (i in 1:100){\n  if(i%%2)\n    print(i)\n}\n\n[1] 1\n[1] 3\n[1] 5\n[1] 7\n[1] 9\n[1] 11\n[1] 13\n[1] 15\n[1] 17\n[1] 19\n[1] 21\n[1] 23\n[1] 25\n[1] 27\n[1] 29\n[1] 31\n[1] 33\n[1] 35\n[1] 37\n[1] 39\n[1] 41\n[1] 43\n[1] 45\n[1] 47\n[1] 49\n[1] 51\n[1] 53\n[1] 55\n[1] 57\n[1] 59\n[1] 61\n[1] 63\n[1] 65\n[1] 67\n[1] 69\n[1] 71\n[1] 73\n[1] 75\n[1] 77\n[1] 79\n[1] 81\n[1] 83\n[1] 85\n[1] 87\n[1] 89\n[1] 91\n[1] 93\n[1] 95\n[1] 97\n[1] 99\n\n\nProblem 2 : Generate 100 random numbers within a specific range runif can do this\n\nrunif(100,1,100)\n\n  [1] 15.889277 59.136397 64.822341 43.422642 52.547811 31.898228 73.819200\n  [8] 93.587851 44.307231 33.382910 23.205881 16.521188 56.319771  6.621819\n [15] 61.383689 22.213767 27.762229 68.549349 48.884195 30.628755 43.425576\n [22] 25.676630 17.814282  1.306124 42.114243 29.576867 38.094581 84.765508\n [29] 12.716311 96.428840 54.983269 64.242936 86.840717 66.528984 44.053079\n [36] 23.490570 41.020487 28.515237 13.657993 85.395037 63.852282 12.739961\n [43] 58.434300 91.096981 51.807013 43.824768  7.599941 48.173916 82.922199\n [50]  9.355915 24.538731 12.121493  2.934625 76.308445 71.625870 65.128533\n [57] 98.523264 99.868982 76.469857 52.450124 72.703304 85.776402 40.616870\n [64] 23.038685 43.390797 29.680340 42.503802 89.671145 18.112930 50.836173\n [71] 57.099333 31.892689 85.486740 44.886170 46.738857 31.034709 52.570192\n [78] 65.794401  2.725048 77.852667 39.005632 54.076517 64.377173 49.607638\n [85] 80.608808 96.151022 48.009768  9.564355 19.966706 94.325005 38.224029\n [92] 59.321321  8.735454 69.996591 56.979235 32.775390 92.214612 17.144312\n [99] 25.323213 41.004843\n\n\nProblem 3: Create a variable that stores a 20x20 matrix of random numbers\n\nrandom_num <-matrix(runif(400, min=3,max=45), nrow = 20, ncol=20)\n\n#Harder problems\nProblem 1: FizzBuzz List the numbers from 1 to 100 with the following constraints.\nThis question can be solved using for loop and if else statements\n\nfizzb <- c(1:100)\nfor (i in 1:length(fizzb)){\n  fizzb[i] <-i\n  if(i%%3 == 0 & i%%5== 0){\n    fizzb[i] =\"FizzBuzz\"\n  } else if (i%%3 ==0){\n    fizzb[i] =\"Fizz\"\n  }\nelse if (i%%5 ==0 )\n  fizzb[i] = \"Buzz\"\n}\n\nProblem 2:\n\na<-runif(10000000,0,100)\nhist(a)\n\n\n\n\nProblem 3: Assume that a pair of dice are rolled. Using monte carlo-simulation, compute the probabilities of rolling a 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, and 12, respectively.\n\ndice1 <- replicate(1000,(sample(1:6,1,replace= TRUE)))\ndice2 <-replicate(1000,(sample(1:6,1,replace= TRUE)))\nsim <- c()\ncombined <- dice1+dice2\nsim <- table(combined)/1000\n\nProblem 4: Multiplication table\nGenerate a matrix for a multiplication table. For example, the labels for the columns could be the numbers 1 to 10, and the labels for the rows could be the numbers 1 to 10. The contents of each of the cells in the matrix should be correct answer for multiplying the column value by the row value.\n\nmultiplication_table <-matrix(NA, nrow=10, ncol=10)\ncolnames(multiplication_table) <- c(\"1\", \"2\", \"3\" ,\"4\", \"5\", \"6\", \"7\",\"8\",\"9\",\"10\")\n\nrownames(multiplication_table) <- c(\"1\", \"2\", \"3\" ,\"4\", \"5\", \"6\", \"7\",\"8\",\"9\",\"10\")\n\nfor(i in 1:10) {\n  for(j in 1:10) {\n   multiplication_table[i, j] = (i*j)\n  }\n}\n\nProblem 5:\nsnakes and ladders. how do you add in a representaion of the board, so that you change which square the player is on depending on whether they land on a ladder or snake.\ntry solving the problem in a simpler way . like maybe roll. dice for ladder\n\nsave_rolls <- c()\nfor(sims in 1:1000){\n    total_sum<-0\n    number_of_rolls<-0\n    curpos <-0\n    ladder <- c(3:11, 6:17,9:18,10:12)\n    snakes <- c(14:4, 19:8, 22:20, 24:16)\n  while(total_sum < 25){\n    total_sum <-total_sum+sample(c(1,2,3,4,5,6),1)\n      if (curpos %in% snakes) {\n       curpos = curpos +1  }\n      if (curpos %in% ladder){\n       curpos = curpos +1\n  }\n  number_of_rolls <- number_of_rolls+1\n\n}\nsave_rolls[sims] <- number_of_rolls\n}\nmean(save_rolls)\n\n[1] 7.684"
  },
  {
    "objectID": "posts/CopyOfData Visualization/Data Visual.html",
    "href": "posts/CopyOfData Visualization/Data Visual.html",
    "title": "Data Vis",
    "section": "",
    "text": "#Data types\nThere are different data types in R: numeric, character, and logical\nNumeric data\nIt has two type: integer and double\nIntegers do not have decimal point and double do.\n\nnumeric_data <-c(10.4,7,4) #DOUBLE\ntypeof(numeric_data[1])\n\n[1] \"double\"\n\ntypeof(numeric_data[2])\n\n[1] \"double\"\n\ntypeof(numeric_data[3])\n\n[1] \"double\"\n\nis.numeric(numeric_data[3]) #to check the data type. retuns false or true\n\n[1] TRUE\n\ntypeof(7L)\n\n[1] \"integer\"\n\n\nCharacter data\nCharacters are also called strings. Anything between quotation marks “” is treated as character\n\ntypeof(\"what is the date today?\") #tells the type of data\n\n[1] \"character\"\n\nmy_string <- \"The instructor said, \\\"R is cool,\\\" and the class agreed.\"\ncat(my_string) # cat() prints the arguments\n\nThe instructor said, \"R is cool,\" and the class agreed.\n\n\nLogical\n\nx<- c(4,5,6,7) #this one asks if 7 is found in the object x\n 7 %in% x \n\n[1] TRUE\n\nclass(TRUE) #it tells that the class of true is logical\n\n[1] \"logical\"\n\n\nFactor data When you use factor, you are telling R that this is categorical data with levels. This can be very helpful in various types of statistical analysis.\n\nmyfactor <- factor(\"B\", levels = c(\"A\", \"B\",\"C\")) # B is a factor which has three levels A,B and C\nmyfactor \n\n[1] B\nLevels: A B C\n\n\n#Tidy data\nUntidy data can be hard for us and the computer to read and do anlaysis on it. In tidy data, every column is variable, every row is an observation and every cell is a single value.\n\nuntidy_data <- read.csv(\"CopyOfdata/untidy_data.csv\")\n\n\nuntidy_data\n\n  customer_id itemsprice_2018 itemsprice_2019 itemsprice_2020 totalprice_2018\n1           1        2 (3.91)        8 (4.72)       10 (5.59)            7.82\n2           2        1 (3.91)        6 (4.72)        1 (5.59)            3.91\n3           3        4 (3.91)        5 (4.72)        5 (5.59)           15.64\n4           4       10 (3.91)        1 (4.72)        3 (5.59)           39.10\n5           5        3 (3.91)        9 (4.72)        8 (5.59)           11.73\n  totalprice_2019 totalprice_2020\n1           37.76           55.90\n2           28.32            5.59\n3           23.60           27.95\n4            4.72           16.77\n5           42.48           44.72\n\n#This is an example of untidy data. \n#It shows that itemprice has two values in each cell\n#It is hard to read as it shows the data for all three years repeatedly which can be confusing to analyze.\n\n\ntidy_data <- read.csv(\"CopyOfdata/tidy_data.csv\")\n\ntidy_data #This is an example of tidy data. It shows how each observatio ihas its own row and each value has its own cell.\n\n   customer_id year items price_per_item totalprice\n1            1 2018     2           3.91       7.82\n2            1 2019     8           4.72      37.76\n3            1 2020    10           5.59      55.90\n4            2 2018     1           3.91       3.91\n5            2 2019     6           4.72      28.32\n6            2 2020     1           5.59       5.59\n7            3 2018     4           3.91      15.64\n8            3 2019     5           4.72      23.60\n9            3 2020     5           5.59      27.95\n10           4 2018    10           3.91      39.10\n11           4 2019     1           4.72       4.72\n12           4 2020     3           5.59      16.77\n13           5 2018     3           3.91      11.73\n14           5 2019     9           4.72      42.48\n15           5 2020     8           5.59      44.72\n\n\n#GGplot\n\nlibrary(ggplot2)\n\nsurvey_data <- read.csv(\"https://psyteachr.github.io/ads-v2/data/survey_data.csv\")\n\nsurvey_ggplot <- ggplot(survey_data, aes(x = wait_time, y = call_time)) +\n  geom_point(colour= \"red\") +\n  geom_smooth(method =lm) + \n  \n  scale_x_continuous(name = \"Wait Time (seconds)\",\n                     breaks = seq(from=0, to= 600, by=60))+\n  \n  scale_y_continuous(name = \"Call time (seconds)\",\n                     breaks = seq(from = 0, to = 600, by = 30))+\n  labs(title = \"The relationship between wait time and call time\",\n       subtitle = \"2020 Call Data\",\n       caption = \"Figure 1. As wait time increases, call time increases.\")\n  \n\n\nsurvey_ggplot\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n```"
  },
  {
    "objectID": "posts/Data summaries/Data summaries.html",
    "href": "posts/Data summaries/Data summaries.html",
    "title": "Data Summaries",
    "section": "",
    "text": "#Social media data and summarise ()\n\ntweets <- readRDS(\"ncod_tweets.rds\")\nfavourite_summary <- summarise(tweets,\n                           mean_favs = mean(favorite_count),\n                           median_favs = median(favorite_count),\n                           min_favs = min(favorite_count),\n                           max_favs = max(favorite_count))\n\n\ntweet_summary <- tweets %>%\n  summarise(mean_favs = mean(favorite_count),\n            median_favs = quantile(favorite_count, .5),\n            n = n(),\n            min_date = min(created_at),\n            max_date = max(created_at))\n\nglimpse(tweet_summary)\n\nRows: 1\nColumns: 5\n$ mean_favs   <dbl> 29.71732\n$ median_favs <dbl> 3\n$ n           <int> 28626\n$ min_date    <dttm> 2021-10-10 00:10:02\n$ max_date    <dttm> 2021-10-12 20:12:27\n\n\nGGPLOT of favorite_count\n\nggplot(tweets, aes(x = favorite_count)) +\n  geom_histogram(bins = 25) +\n  scale_x_continuous(trans = \"pseudo_log\", #it goes up in intervals of magnitude and it helps see how much is between each interval \n                     breaks = c(0, 1, 10, 100, 1000, 10000))\n\n\n\n\n\ntweets$source[2] #displays the second value in the row\n\n[1] \"Twitter for iPhone\"\n\n# %>% this is a pipe operator and it can be used to send output from one function into another \ntweet_summary <- tweets %>% # start with the object tweets and then\n  summarise(mean_favs = mean(favorite_count), #summarise it\n            median_favs = median(favorite_count))\n\n\ntweet_summary <- tweets %>%\n  summarise(mean_favs = mean(favorite_count),\n            median_favs = quantile(favorite_count, .5),\n            n = n(),\n            min_date = min(created_at),\n            max_date = max(created_at))\n\nglimpse(tweet_summary)\n\nRows: 1\nColumns: 5\n$ mean_favs   <dbl> 29.71732\n$ median_favs <dbl> 3\n$ n           <int> 28626\n$ min_date    <dttm> 2021-10-10 00:10:02\n$ max_date    <dttm> 2021-10-12 20:12:27\n\ntweet_summary$mean_favs #The $ operator\n\n[1] 29.71732\n\n#inline coding is also very helpful when it comes to writing paper.\n#You use `r' \ndate_from <- tweet_summary$min_date %>% \n  format(\"%d %B, %Y\")\ndate_to <- tweet_summary$max_date %>% \n  format(\"%d %B, %Y\")\n\nThere were 28626 tweets between 10 October, 2021 and 12 October, 2021.\n\nverified <- \n  tweets %>% # Start with the original dataset; and then\n  group_by(verified) %>% # group it; and then\n  summarise(count = n(), # summarise it by those groups\n            mean_favs = mean(favorite_count),\n            mean_retweets = mean(retweet_count)) %>%\n  ungroup()\n\nverified\n\n# A tibble: 2 × 4\n  verified count mean_favs mean_retweets\n  <lgl>    <int>     <dbl>         <dbl>\n1 FALSE    26676      18.4          1.83\n2 TRUE      1950     184.          21.5 \n\n\n\nmost_fav <- tweets %>%\n  group_by(is_quote) %>%\n  filter(favorite_count == max(favorite_count)) %>%\n  sample_n(size = 1) %>%\n  ungroup()\n\n#Inline coding 2\n\ntweets_per_user <- tweets %>%\n  count(screen_name, sort = TRUE)\n\nhead(tweets_per_user)\n\n# A tibble: 6 × 2\n  screen_name         n\n  <chr>           <int>\n1 interest_outfit    35\n2 LeoShir2           33\n3 NRArchway          32\n4 dr_stack           32\n5 bhavna_95          25\n6 WipeHomophobia     23\n\nunique_users <- nrow(tweets_per_user)\nmost_prolific <- slice(tweets_per_user, 1) %>% \n  pull(screen_name)\nmost_prolific_n <- slice(tweets_per_user, 1) %>% \n  pull(n)\n\nThere were 25189 unique accounts tweeting about #NationalComingOutDay. interest_outfit was the most prolific tweeter, with 35 tweets.\n#Extra challenge problem\n\nny_data <- readr::read_csv(\"New_York_City_Leading_Causes_of_Death.csv\")\n\nRows: 1094 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (6): Leading Cause, Sex, Race Ethnicity, Deaths, Death Rate, Age Adjuste...\ndbl (1): Year\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ncorrected_nydata <-cols(\n  Year = col_double(),\n  `Leading Cause` = col_character(),\n  Sex = col_character(),\n  `Race Ethnicity` = col_character(),\n  Deaths = col_double(),\n  `Death Rate` = col_number(),\n  `Age Adjusted Death Rate` = col_number()\n)\n  \n ny_data <- readr::read_csv(\"New_York_City_Leading_Causes_of_Death.csv\",\n                             col_types = corrected_nydata,\n                              na = \".\"\n                              )\n\n summary_nydata <- ny_data %>%\n   group_by(`Leading Cause`) %>%\n   summarise(mean_death = mean(Deaths, na.rm = TRUE)) %>%\n   ggplot(aes(x=`Leading Cause`, y=mean_death)) +\n   geom_point(na.rm = TRUE)+\n   theme(axis.text.x = element_text(angle = 23, vjust = 1, hjust = 1))+\n   scale_y_continuous(name=\"mean_death\", limits = c(0, 1500, breaks= seq(0,1500,100)))\n\n\nsummary_nydata"
  },
  {
    "objectID": "posts/Data Import /Data import.html",
    "href": "posts/Data Import /Data import.html",
    "title": "Data Import",
    "section": "",
    "text": "#Built-in data\n\n#data(cars)\n\n  #this shows your data\n\n#view(cars) \n\n  #one of the way you can view your data\n\n#Importing data\n\n# rio::import() is helpful\navatar <- readr::read_csv(\"data/avatar.csv\")\n\nRows: 3 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): name, bends\nlgl (1): friendly\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n#spec() function enables us to change our data type simultaneously, first load package readr::read_whatever file type\n\n#Creating data\n\n random_data <- data.frame(\n   random_number = c(1,5),\n   random_words = c(\"water\", \"earth\")\n \n     )\nrandom_data %>%\n  mutate( c(\"tf\",\"hh\"))\n\n  random_number random_words c(\"tf\", \"hh\")\n1             1        water            tf\n2             5        earth            hh\n\n\n#Writing data\n\n#try making data frame, export it, then remove it from environment\nfamily <- data.frame(\n  first_name= c(\"lisa\", \"James\"),\n  last_name = c(\"Robert\", \"Jones\"),\n  Ages = c(34,40)\n)\nexport(family, \"data/family.csv\")\n\n\n#import data after deleting it  from environment\ntry_importing <- import(\"data/family.csv\")\n\n\nConvert column types of a data set\n\nstarwars <-read_csv(\"data/starwars.csv\")\n\nRows: 87 Columns: 14\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (11): name, hair_color, skin_color, eye_color, sex, gender, homeworld, s...\ndbl  (3): height, mass, birth_year\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n#use this function: spec(starwars) \n \nct <- cols(\n  name = col_character(),\n  height = col_factor(),\n  mass = col_double(),\n  hair_color = col_factor(),\n  skin_color = col_factor(),\n  eye_color = col_factor(),\n  birth_year = col_double(),\n  sex = col_factor(),\n  gender = col_factor(),\n  homeworld = col_factor(),\n  species = col_factor(),\n  films = col_skip(),\n  vehicles = col_skip(),\n  starships = col_skip()\n)\n\nstarwars <- read_csv(\"data/starwars.csv\",\n                   col_types = ct)\n\n\n\nstarwars <-read_csv(\"data/starwars.csv\", col_types = ct)"
  },
  {
    "objectID": "posts/More ggplot/More ggplot.html",
    "href": "posts/More ggplot/More ggplot.html",
    "title": "More ggplot",
    "section": "",
    "text": "library(ggplot2)\n\ngrades <- data.frame(\n  students = c(\"A\",\"B\",\"C\"),\n  grades = c(2.5,8,4)\n)\n\nggplot_grades <- ggplot(grades, aes(x= students, y=grades)) +\n  geom_bar(stat =\"identity\", fill=\"white\", color=\"blue\")+\n  geom_text(aes(label= grades), position = position_dodge(width = 0.9), vjust =- 0.4)+\n  scale_y_continuous(limits = c(0,10), breaks = seq(1,10,1))+\n  theme_classic() +\n  xlab(\"Students\")+\n  ylab(\"Grades\")+\n  ggtitle(\"Student Performance\" )\n\nggplot_grades\n\n\n\n\n\nlibrary(ggplot2)\n\n\nScatterplot\n\nrate_of_social_risk <- data.frame(\n        Avg_frq_nonsocial_risk = c(0,1,3,4,25,46,55,60),\n        Avg_frq_social_risk = c(12,47,4,41,57,34,57,60)\n)\n\nggplot_social_risk <-\n  ggplot(rate_of_social_risk, aes(x = Avg_frq_nonsocial_risk, y = Avg_frq_social_risk))+\n  geom_point(shape=18, size=1) +\n  geom_smooth(method = \"lm\", se= FALSE, color =\"black\", size=.35)+\n   theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),\npanel.grid.minor = element_blank(), axis.line = element_line(colour = \"black\"))+\n  scale_y_continuous( breaks =seq(0,70,10), expand = c(0, 0) )+\n   scale_x_continuous( breaks =seq(0,70,10),expand = c(0, 0) )+\n  xlab(\"Average Frequency of Nonsocial Risk\")+\n  ylab(\"Average Frequency of Social Risk\")+\n  coord_cartesian(xlim = c(0,70), ylim=c(0,70))\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\nggplot_social_risk\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n#Bargraph\n\nlibrary(ggpubr)\n\nCondition <-rep(c(\"No \\n Transient\",\"Transient\"), each=2)\nLocation <-rep(c(\"Outside\",\"Inside\"),2)\nMMRT <- c(304,300,290,280)\nCI_upper <-c(315,310,304,290)\nCI_lower <-c(295,290,283,270)\nplot_df <-data.frame(Condition,Location,MMRT,CI_upper,CI_lower)\nplot_df$Location <- factor(plot_df$Location, \n                         levels = c(\"Outside\",\"Inside\"))\n\nvis<-ggplot(plot_df, aes(x=Condition, y=MMRT, group=Location,\n                    fill=Location))+\n  geom_bar(stat=\"identity\",position=\"dodge\", \n           color=\"black\",\n           size=.25)+\n  theme_classic()+\n  ylab(\"Mean Median RT (ms)\")+\n  coord_cartesian(ylim=c(230,340))+\n  scale_y_continuous(breaks=seq(230,340,10))+\n  scale_fill_brewer(palette=\"Greys\", direction=-1)+\n   theme(legend.position=c(0.55,0.8),\n        legend.title=element_blank(),\n        legend.key.size = unit(.5, \"cm\"))+\n  ggtitle(\"Visual Group\")\n\nCondition <-rep(c(\"No \\n Transient\",\"Transient\"), each=2)\nLocation <-rep(c(\"Outside\",\"Inside\"),2)\nMMRT <- c(295,290,265,250)\nCI_upper <-c(305,300,275,260)\nCI_lower <-c(285,280,255,240)\nplot_df <-data.frame(Condition,Location,MMRT,CI_upper,CI_lower)\nplot_df$Location <- factor(plot_df$Location, \n                         levels = c(\"Outside\",\"Inside\"))\n\naud<-ggplot(plot_df, aes(x=Condition, y=MMRT, group=Location,\n                    fill=Location))+\n  geom_bar(stat=\"identity\",position=\"dodge\", \n           color=\"black\",\n           size=.25)+\n  theme_classic()+\n  ylab(\"Mean Median RT (ms)\")+\n  coord_cartesian(ylim=c(230,340))+\n  scale_y_continuous(breaks=seq(230,340,10))+\n  scale_fill_brewer(palette=\"Greys\", direction=-1)+\n   theme(legend.position=\"none\")+\n  ggtitle(\"Auditory Group\")\n\nggarrange(vis,aud)"
  },
  {
    "objectID": "posts/Data Relations/Data relations.html",
    "href": "posts/Data Relations/Data relations.html",
    "title": "Data Relations",
    "section": "",
    "text": "customers <- tibble(\n  id = 1:5,\n  city = c(\"Port Ellen\", \"Dufftown\", NA, \"Aberlour\", \"Tobermory\"),\n  postcode = c(\"PA42 7DU\", \"AB55 4DH\", NA, \"AB38 7RY\", \"PA75 6NR\")\n)\norders <- tibble(\n  id = c(2, 3, 4, 4, 5, 5, 6, 6, 7),\n  items = c(10, 18, 21, 23, 9, 11, 11, 12, 3)\n)"
  },
  {
    "objectID": "posts/Data Relations/Data relations.html#left-join",
    "href": "posts/Data Relations/Data relations.html#left-join",
    "title": "Data Relations",
    "section": "Left join",
    "text": "Left join\n\nleft_data <- left_join(customers, orders, by = \"id\")\n\nWarning in left_join(customers, orders, by = \"id\"): Each row in `x` is expected to match at most 1 row in `y`.\nℹ Row 4 of `x` matches multiple rows.\nℹ If multiple matches are expected, set `multiple = \"all\"` to silence this\n  warning.\n\nleft_data\n\n# A tibble: 7 × 4\n     id city       postcode items\n  <dbl> <chr>      <chr>    <dbl>\n1     1 Port Ellen PA42 7DU    NA\n2     2 Dufftown   AB55 4DH    10\n3     3 <NA>       <NA>        18\n4     4 Aberlour   AB38 7RY    21\n5     4 Aberlour   AB38 7RY    23\n6     5 Tobermory  PA75 6NR     9\n7     5 Tobermory  PA75 6NR    11\n\nleft2_data <- left_join(orders, customers, by = \"id\")\nleft2_data\n\n# A tibble: 9 × 4\n     id items city      postcode\n  <dbl> <dbl> <chr>     <chr>   \n1     2    10 Dufftown  AB55 4DH\n2     3    18 <NA>      <NA>    \n3     4    21 Aberlour  AB38 7RY\n4     4    23 Aberlour  AB38 7RY\n5     5     9 Tobermory PA75 6NR\n6     5    11 Tobermory PA75 6NR\n7     6    11 <NA>      <NA>    \n8     6    12 <NA>      <NA>    \n9     7     3 <NA>      <NA>"
  },
  {
    "objectID": "posts/Data Relations/Data relations.html#right-join",
    "href": "posts/Data Relations/Data relations.html#right-join",
    "title": "Data Relations",
    "section": "right join",
    "text": "right join\n\nright_data <- right_join(customers, orders, by = \"id\")\n\nWarning in right_join(customers, orders, by = \"id\"): Each row in `x` is expected to match at most 1 row in `y`.\nℹ Row 4 of `x` matches multiple rows.\nℹ If multiple matches are expected, set `multiple = \"all\"` to silence this\n  warning.\n\nright_data\n\n# A tibble: 9 × 4\n     id city      postcode items\n  <dbl> <chr>     <chr>    <dbl>\n1     2 Dufftown  AB55 4DH    10\n2     3 <NA>      <NA>        18\n3     4 Aberlour  AB38 7RY    21\n4     4 Aberlour  AB38 7RY    23\n5     5 Tobermory PA75 6NR     9\n6     5 Tobermory PA75 6NR    11\n7     6 <NA>      <NA>        11\n8     6 <NA>      <NA>        12\n9     7 <NA>      <NA>         3"
  },
  {
    "objectID": "posts/Data Relations/Data relations.html#inner-join",
    "href": "posts/Data Relations/Data relations.html#inner-join",
    "title": "Data Relations",
    "section": "inner join",
    "text": "inner join\n\ninner_data <- inner_join(customers, orders, by = \"id\")\n\nWarning in inner_join(customers, orders, by = \"id\"): Each row in `x` is expected to match at most 1 row in `y`.\nℹ Row 4 of `x` matches multiple rows.\nℹ If multiple matches are expected, set `multiple = \"all\"` to silence this\n  warning.\n\ninner_data\n\n# A tibble: 6 × 4\n     id city      postcode items\n  <dbl> <chr>     <chr>    <dbl>\n1     2 Dufftown  AB55 4DH    10\n2     3 <NA>      <NA>        18\n3     4 Aberlour  AB38 7RY    21\n4     4 Aberlour  AB38 7RY    23\n5     5 Tobermory PA75 6NR     9\n6     5 Tobermory PA75 6NR    11"
  },
  {
    "objectID": "posts/Data Relations/Data relations.html#full-join",
    "href": "posts/Data Relations/Data relations.html#full-join",
    "title": "Data Relations",
    "section": "full join",
    "text": "full join\n\nfull_data <- full_join(customers, orders, by = \"id\")\n\nWarning in full_join(customers, orders, by = \"id\"): Each row in `x` is expected to match at most 1 row in `y`.\nℹ Row 4 of `x` matches multiple rows.\nℹ If multiple matches are expected, set `multiple = \"all\"` to silence this\n  warning.\n\nfull_data\n\n# A tibble: 10 × 4\n      id city       postcode items\n   <dbl> <chr>      <chr>    <dbl>\n 1     1 Port Ellen PA42 7DU    NA\n 2     2 Dufftown   AB55 4DH    10\n 3     3 <NA>       <NA>        18\n 4     4 Aberlour   AB38 7RY    21\n 5     4 Aberlour   AB38 7RY    23\n 6     5 Tobermory  PA75 6NR     9\n 7     5 Tobermory  PA75 6NR    11\n 8     6 <NA>       <NA>        11\n 9     6 <NA>       <NA>        12\n10     7 <NA>       <NA>         3"
  },
  {
    "objectID": "posts/Data Relations/Data relations.html#semi-join",
    "href": "posts/Data Relations/Data relations.html#semi-join",
    "title": "Data Relations",
    "section": "semi join",
    "text": "semi join\n\n#they can keep or remove rows from table\n\nsemi_data <- semi_join(customers, orders, by = \"id\")\nsemi_data\n\n# A tibble: 4 × 3\n     id city      postcode\n  <int> <chr>     <chr>   \n1     2 Dufftown  AB55 4DH\n2     3 <NA>      <NA>    \n3     4 Aberlour  AB38 7RY\n4     5 Tobermory PA75 6NR\n\nsemi2_data <- semi_join(orders, customers, by = \"id\")\nsemi2_data\n\n# A tibble: 6 × 2\n     id items\n  <dbl> <dbl>\n1     2    10\n2     3    18\n3     4    21\n4     4    23\n5     5     9\n6     5    11"
  },
  {
    "objectID": "posts/Data Relations/Data relations.html#anti-join",
    "href": "posts/Data Relations/Data relations.html#anti-join",
    "title": "Data Relations",
    "section": "anti join",
    "text": "anti join\n\nanti_data <- anti_join(customers, orders, by = \"id\")\nanti_data\n\n# A tibble: 1 × 3\n     id city       postcode\n  <int> <chr>      <chr>   \n1     1 Port Ellen PA42 7DU\n\nanti2_data <- anti_join(orders, customers, by = \"id\")\nanti2_data\n\n# A tibble: 3 × 2\n     id items\n  <dbl> <dbl>\n1     6    11\n2     6    12\n3     7     3"
  },
  {
    "objectID": "posts/Practice Report/practice.html",
    "href": "posts/Practice Report/practice.html",
    "title": "posts",
    "section": "",
    "text": "---\ntitle: “Video game review report”\ntbl-cap-location: bottom\n---\n\n\n\n## Number of reviews by year\nThe below histogram shows the number of video game reviews submitted to Amazon by year. From 1999 reviews largely increased year-on-year which is unsurprising given the growth of Amazon and access to the internet. The dataset shows the peak number of reviews was 2015 with a decline from 2016 to 2018. It is likely that this reflects the dataset being incomplete for recent years rather than the number of reviews declining in reality.\n\n\n\n\n\n## Verified users\nThe dataset contains details of whether the review was based on a verified purchase. From [Amazon Community] (https://www.amazon.co.uk/gp/help/customer/display.html?nodeId=G75XTB7MBMBTXP6W):\n> An “Amazon Verified Purchase” review means that we’ve verified that the person writing the review purchased the product from Amazon, and didn’t receive the product at a big discount. Reviews that are not marked “Amazon Verified Purchase” are valuable as well, but, either we cannot confirm that the product was purchased from Amazon, or that the customer paid a price that is available to most Amazon shoppers.\nTable 1 shows the number of reviews based on verified and unverified purchases.\n\n\nTable 1: ?(caption)\n\n\n\n\n(a) Number of reviews by purchase status\n\n\nverified\ncounts\n\n\n\n\nFALSE\n164932\n\n\nTRUE\n332645\n\n\n\n\n\n\nWhilst the number of verified reviews is substantially larger than the number of unverified reviews, the below histogram demonstrates that this has not been a consistent trend and that the large increase in the number of reviews is largely driven by an increase in verified reviews.\n\n\n`summarise()` has grouped output by 'year'. You can override using the\n`.groups` argument.\n\n\n\n\n\n```\n## Review ratings\n## Overall\nAmazon review ratings are provided on a scale of 1 (worst) to 5 (best) stars. The histogram below shows the total number of reviews assigned each rating.\n\n\n\n\n\n## By purchase status\nHowever, if you break this data down by verified purchases status you can see that whilst the number of verified and unverified reviews with 1 to 4 star reviews are similar, there is a very large number of 5 star reviews for verified purchases compared to unverified purchases.\n\n#Get number of reviews per year\n\nrating_by_verified_counts <- review_data %>%\n\n  group_by(rating,verified) %>%\n\n  summarize(counts = n())\n\n`summarise()` has grouped output by 'rating'. You can override using the\n`.groups` argument.\n\n#ggplot(data = reviews_by_year, mapping = aes(x=year, y=counts))\n\n#ggplot(reviews_by_year, aes(x=year, y=counts))\n\n# plot\n\nggplot(data = rating_by_verified_counts, \n\n       mapping = aes(x=rating, \n\n                     y=counts, \n\n                     group = verified,\n\n                     fill = verified))+\n\n  geom_bar(stat= \"identity\", position = \"dodge\")+\n\n  xlab(\"\")+\n\n  ylab(\"\")+\n\n  ggtitle(\"Review Ratings\",\n\n          subtitle = \"By purchase status\")+\n\n  theme(\n\n    panel.background = element_rect(fill = \"lightgrey\",\n\n                                colour = \"lightgrey\",\n\n                                linewidth = 0.5, linetype = \"solid\"),\n\n    panel.grid.major=element_line(colour=\"black\",linewidth = .05),\n\n    panel.grid.minor=element_line(colour=\"lightgrey\"))"
  },
  {
    "objectID": "posts/Data Tidying/Data tidying.html",
    "href": "posts/Data Tidying/Data tidying.html",
    "title": "Data Import",
    "section": "",
    "text": "Data Structures\n\n#untidy and tidy data\n\nuntidy_data <- read.csv(\"data/untidy_data.csv\")\n#untidy data has two values in one column\n#three years of data \n#harder to do mathematical operation on it \n\ntidy_data <- read.csv(\"data/tidy_data.csv\")\n#-organized\n#-has each cell for each value\n#-Each observation must have its own row\n#-Each variable must have its own column\n#-Each value must have its own cell\ntidy_data %>%\n  group_by(customer_id) %>%\n  summarise(\n    total_items = sum(items),\n    total_price = sum(totalprice)\n  )\n\n# A tibble: 5 × 3\n  customer_id total_items total_price\n        <int>       <int>       <dbl>\n1           1          20       101. \n2           2           8        37.8\n3           3          14        67.2\n4           4          14        60.6\n5           5          20        98.9\n\n\n\n\nReshaping Data\n\n#Wide data and long data conversion\n\n# select just the customer ID and 3 total price columns\nwide_totalprice <- select(\n  .data = untidy_data,\n  customer_id, \n  `2018` = totalprice_2018,\n  `2019` = totalprice_2019,\n  `2020` = totalprice_2020\n)\n## Wide to long\nlong_totalprice <- pivot_longer(\n  data = wide_totalprice,\n  cols = `2018`:`2020`,\n  names_to = \"year\",\n  values_to = \"totalprice\")\n\n#untidy_data[,c(5:7)] this can also be done to select last three columns as well\n#logn data is easy for ggplot\n\n# Long to wide\nwide_by_yr <- pivot_wider(\n  data = long_totalprice,\n  id_cols = customer_id, # identifying column(s) whose levels will become new columns\n  names_from = year, # the new column names\n  values_from = totalprice # the new column values\n)\n\n\n\nMulti-step tidying\n\nlonger_data <- pivot_longer(\n  data = untidy_data, \n  cols = itemsprice_2018:totalprice_2020, # columns to make long \n  names_to = c(\"category\", \"year\"), # new column names for cols\n  names_sep = \"_\", # how to split cols into new columns\n  # names_pattern = \"(.*)_(.*)\", # alternative to names_sep\n  values_to = \"value\", # new column name for values\n  \n  # make sure new columns are the right data type\n  names_transform = list(year = as.integer),\n  values_transform = list(value = as.character) \n)\n\n\n#One variable per column\nwider_data <- pivot_wider(\n  data = longer_data,\n  id_cols = c(customer_id, year),\n  names_from = category,\n  values_from = value\n)\n\n#One value per cell\nsplit_data <- separate(\n  data = wider_data, \n  col = itemsprice, # the column to split\n  into = c(\"items\", \"price_per_item\"), # the new columns to create\n  sep = \" \", # split col by space between two numbers\n  remove = TRUE, # whether to remove to old col\n  convert = TRUE # whether to fix the data type of the new columns\n)\n\n# removing parentheses\nmutated_data <- mutate(\n  .data = split_data,\n  price_per_item = stringr::str_replace_all(\n    string = price_per_item, \n    pattern = \"[()]\", #put what we want to replace #regex\n    replacement = \"\" #what we want to replace with\n  )\n)\n\n#fixing data types\ntidy_data <- type_convert(\n  df = mutated_data,\n  trim_ws = TRUE # removes spaces before and after values\n)\n\n\n── Column specification ────────────────────────────────────────────────────────\ncols(\n  price_per_item = col_double(),\n  totalprice = col_double()\n)\n\n# check the data types\nglimpse(tidy_data)\n\nRows: 15\nColumns: 5\n$ customer_id    <int> 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5\n$ year           <int> 2018, 2019, 2020, 2018, 2019, 2020, 2018, 2019, 2020, 2…\n$ items          <int> 2, 8, 10, 1, 6, 1, 4, 5, 5, 10, 1, 3, 3, 9, 8\n$ price_per_item <dbl> 3.91, 4.72, 5.59, 3.91, 4.72, 5.59, 3.91, 4.72, 5.59, 3…\n$ totalprice     <dbl> 7.82, 37.76, 55.90, 3.91, 28.32, 5.59, 15.64, 23.60, 27…\n\n\n\n\nPipes\n\n#You can also use pipes \n\ntidy_data <- read_csv(file = \"data/untidy_data.csv\", show_col_types = FALSE) %>% \n  pivot_longer( cols = itemsprice_2018:totalprice_2020, names_to = c(\"category\", \"year\"), names_sep = \"_\", values_to =\"value\", names_transform = list(year = as.integer), values_transform = list(value = as.character) ) %>% \npivot_wider( id_cols = c(customer_id, year), names_from = category, values_from = value ) %>%\n  separate( col = itemsprice, into = c(\"items\", \"price_per_item\"), sep = \" \", remove = TRUE, convert = TRUE ) %>%\n  mutate( price_per_item = stringr::str_replace_all( string = price_per_item, pattern =\" \", replacement =\"\" ) ) %>%\n  type_convert( trim_ws = TRUE )\n\n\n── Column specification ────────────────────────────────────────────────────────\ncols(\n  price_per_item = col_character(),\n  totalprice = col_double()\n)"
  },
  {
    "objectID": "posts/Data Wrangling/Data Wrangling.html",
    "href": "posts/Data Wrangling/Data Wrangling.html",
    "title": "Data Wrangling",
    "section": "",
    "text": "library(tidyverse) \n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.0     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.1     ✔ tibble    3.1.8\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the \u001b]8;;http://conflicted.r-lib.org/\u0007conflicted package\u001b]8;;\u0007 to force all conflicts to become errors\n\nlibrary(dplyr) # data wrangling functions"
  },
  {
    "objectID": "posts/Data Wrangling/Data Wrangling.html#select",
    "href": "posts/Data Wrangling/Data Wrangling.html#select",
    "title": "Data Wrangling",
    "section": "Select",
    "text": "Select\n\n# select single column by name\nproduct_dat <- budget %>% select(product) \n\n# select single column by number\n(product_dat <- budget %>% select(2,3))\n\n# A tibble: 8 × 2\n  product sales_2019\n  <chr>        <dbl>\n1 widgets       2129\n2 gadgets        723\n3 widgets       1123\n4 gadgets       2022\n5 widgets       -728\n6 gadgets       -423\n7 widgets        633\n8 gadgets       1204\n\n# select columns individually\nsales2019 <- budget %>% select(region, product, sales_2019)\n\n# select columns with colon\nsales2019 <- budget %>% select(region:sales_2019)\n\n\nregions <- budget %>% select(`Sales Region` = 1, 3:6) #renaming columns\n\nhead(regions, 2)\n\n# A tibble: 2 × 5\n  `Sales Region` sales_2019 sales_2020 expenses_2019 expenses_2020\n  <chr>               <dbl>      <dbl>         <dbl>         <dbl>\n1 North                2129       -517           822          -897\n2 North                 723         77          1037          1115\n\n\n\n# de-select individual columns\nsales <- budget %>% select(-expenses_2019, -expenses_2020)\n\n# de-select a range of columns\nsales <- budget %>% select(-(expenses_2019:expenses_2020))"
  },
  {
    "objectID": "posts/Data Wrangling/Data Wrangling.html#filters",
    "href": "posts/Data Wrangling/Data Wrangling.html#filters",
    "title": "Data Wrangling",
    "section": "Filters",
    "text": "Filters\n\n# select all rows where region equals North\nbudget %>% filter(region == \"North\")\n\n# A tibble: 2 × 8\n  region product sales_2019 sales_2020 expenses_2019 expenses_…¹ satis…² satis…³\n  <chr>  <chr>        <dbl>      <dbl>         <dbl>       <dbl> <chr>   <chr>  \n1 North  widgets       2129       -517           822        -897 high    very h…\n2 North  gadgets        723         77          1037        1115 very h… very h…\n# … with abbreviated variable names ¹​expenses_2020, ²​satisfaction_2019,\n#   ³​satisfaction_2020\n\n# select all rows where expenses_2020 were exactly equal to 200\nbudget %>% filter(expenses_2020 == 200)\n\n# A tibble: 1 × 8\n  region product sales_2019 sales_2020 expenses_2019 expenses_…¹ satis…² satis…³\n  <chr>  <chr>        <dbl>      <dbl>         <dbl>       <dbl> <chr>   <chr>  \n1 South  gadgets       2022       -945          -610         200 low     low    \n# … with abbreviated variable names ¹​expenses_2020, ²​satisfaction_2019,\n#   ³​satisfaction_2020\n\n# select all rows where sales_2019 was more than 100\nbudget %>% filter(sales_2019 > 100)\n\n# A tibble: 6 × 8\n  region product sales_2019 sales_2020 expenses_2019 expenses_…¹ satis…² satis…³\n  <chr>  <chr>        <dbl>      <dbl>         <dbl>       <dbl> <chr>   <chr>  \n1 North  widgets       2129       -517           822        -897 high    very h…\n2 North  gadgets        723         77          1037        1115 very h… very h…\n3 South  widgets       1123      -1450          1004         672 high    neutral\n4 South  gadgets       2022       -945          -610         200 low     low    \n5 West   widgets        633        790           783        -315 neutral neutral\n6 West   gadgets       1204        426           433        -136 low     low    \n# … with abbreviated variable names ¹​expenses_2020, ²​satisfaction_2019,\n#   ³​satisfaction_2020\n\n# everything but the North\nbudget %>% filter(region != \"North\")\n\n# A tibble: 6 × 8\n  region product sales_2019 sales_2020 expenses_2019 expenses_…¹ satis…² satis…³\n  <chr>  <chr>        <dbl>      <dbl>         <dbl>       <dbl> <chr>   <chr>  \n1 South  widgets       1123      -1450          1004         672 high    neutral\n2 South  gadgets       2022       -945          -610         200 low     low    \n3 East   widgets       -728        -51          -801        -342 very l… very l…\n4 East   gadgets       -423       -354            94        2036 neutral high   \n5 West   widgets        633        790           783        -315 neutral neutral\n6 West   gadgets       1204        426           433        -136 low     low    \n# … with abbreviated variable names ¹​expenses_2020, ²​satisfaction_2019,\n#   ³​satisfaction_2020\n\n# regions and products with profit in both 2019 and 2020\nprofit_both <- budget %>% \n  filter(\n    sales_2019 > expenses_2019,\n    sales_2020 > expenses_2020\n  )\n\n# the same as above, using & instead of a comma\nprofit_both <- budget %>% \n  filter(\n    sales_2019 > expenses_2019 &\n    sales_2020 > expenses_2020\n  )\n\n# regions and products with profit in 2019 or 2020\nprofit_either <- budget %>% \n  filter(\n    sales_2019 > expenses_2019 | #logical operator for or\n    sales_2020 > expenses_2020\n  )\n\n# 2020 profit greater than 1000\nprofit_1000 <- budget %>%\n  filter(sales_2020 - expenses_2020 > 1000)\n\n\n%in% operator\n\n# retain any rows where region is north or south, and where product equals widget\nbudget %>%\n  filter(region %in% c(\"North\", \"South\"),\n         product == \"widgets\")\n\n# A tibble: 2 × 8\n  region product sales_2019 sales_2020 expenses_2019 expenses_…¹ satis…² satis…³\n  <chr>  <chr>        <dbl>      <dbl>         <dbl>       <dbl> <chr>   <chr>  \n1 North  widgets       2129       -517           822        -897 high    very h…\n2 South  widgets       1123      -1450          1004         672 high    neutral\n# … with abbreviated variable names ¹​expenses_2020, ²​satisfaction_2019,\n#   ³​satisfaction_2020\n\n# retain any rows where the region is not east or west, and where the product does not equal gadgets\nbudget %>%\n  filter(!region %in% c(\"East\", \"West\"),\n         product != \"gadgets\")\n\n# A tibble: 2 × 8\n  region product sales_2019 sales_2020 expenses_2019 expenses_…¹ satis…² satis…³\n  <chr>  <chr>        <dbl>      <dbl>         <dbl>       <dbl> <chr>   <chr>  \n1 North  widgets       2129       -517           822        -897 high    very h…\n2 South  widgets       1123      -1450          1004         672 high    neutral\n# … with abbreviated variable names ¹​expenses_2020, ²​satisfaction_2019,\n#   ³​satisfaction_2020"
  },
  {
    "objectID": "posts/Data Wrangling/Data Wrangling.html#arrange",
    "href": "posts/Data Wrangling/Data Wrangling.html#arrange",
    "title": "Data Wrangling",
    "section": "Arrange",
    "text": "Arrange\n\nbudget %>%\n  mutate(region = factor(region, levels = c(\"North\", \"South\", \"East\", \"West\"))) %>%\n  filter(product == \"gadgets\") %>%\n  arrange(region) # arrange function sorts out data\n\n# A tibble: 4 × 8\n  region product sales_2019 sales_2020 expenses_2019 expenses_…¹ satis…² satis…³\n  <fct>  <chr>        <dbl>      <dbl>         <dbl>       <dbl> <chr>   <chr>  \n1 North  gadgets        723         77          1037        1115 very h… very h…\n2 South  gadgets       2022       -945          -610         200 low     low    \n3 East   gadgets       -423       -354            94        2036 neutral high   \n4 West   gadgets       1204        426           433        -136 low     low    \n# … with abbreviated variable names ¹​expenses_2020, ²​satisfaction_2019,\n#   ³​satisfaction_2020"
  },
  {
    "objectID": "posts/Data Wrangling/Data Wrangling.html#mutate",
    "href": "posts/Data Wrangling/Data Wrangling.html#mutate",
    "title": "Data Wrangling",
    "section": "Mutate",
    "text": "Mutate\n\nbudget2 <- budget %>%\n  mutate(\n    sales = sales_2019 + sales_2020,\n    expenses = expenses_2019 + expenses_2020,\n    profit = sales - expenses,\n    region = paste(region, \"Office\")\n  )\n\n#mutate with logical operator \nbudget2 <- budget2 %>%\n  mutate(profit_category = profit > 0,\n         product = as.factor(product))\n\n# you do not have to use TRUE or FALSE all the time and you can use case_when function \nbudget3 <- budget2 %>%\n  mutate(profit_category = case_when(profit > 0 ~ \"PROFIT\",\n                                     profit < 0 ~ \"NO PROFIT\"))\n\n# use tilda and %in% operator \n\n# create a column where people get a bonus if customer satisfaction was overall high or very high\n\nbonus <- budget3 %>%\n  mutate(bonus_2019 = case_when(satisfaction_2019 %in% c(\"very low\", \"low\", \"neutral\") ~ \"no bonus\",\n                                satisfaction_2019 %in% c(\"high\", \"very high\") ~ \"bonus\"))"
  },
  {
    "objectID": "posts/Data Wrangling/Data Wrangling.html#summarise",
    "href": "posts/Data Wrangling/Data Wrangling.html#summarise",
    "title": "Data Wrangling",
    "section": "Summarise",
    "text": "Summarise\n\n## first we need to adjust the data for analysis\nbudget4 <- budget %>%\n  select(-satisfaction_2019, -satisfaction_2020) %>%\n  pivot_longer(cols = sales_2019:expenses_2020,\n               names_to = c(\"type\", \"year\"),\n               names_sep = \"_\",\n               values_to = \"value\") %>%\n  pivot_wider(names_from = type,\n              values_from = value)\n\nhead(budget4) # check the format\n\n# A tibble: 6 × 5\n  region product year  sales expenses\n  <chr>  <chr>   <chr> <dbl>    <dbl>\n1 North  widgets 2019   2129      822\n2 North  widgets 2020   -517     -897\n3 North  gadgets 2019    723     1037\n4 North  gadgets 2020     77     1115\n5 South  widgets 2019   1123     1004\n6 South  widgets 2020  -1450      672\n\n#then summarize it\nbudget4 %>%\n  summarise(\n    mean_sales = mean(sales),\n    mean_expenses = mean(expenses),\n    min_profit = min(expenses - sales),\n    max_profit = max(expenses - sales)\n  )\n\n# A tibble: 1 × 4\n  mean_sales mean_expenses min_profit max_profit\n       <dbl>         <dbl>      <dbl>      <dbl>\n1       291.          318.      -2632       2390\n\n\n##Group By\n\nyear_prod <- budget4 %>%\n  group_by(year, product) %>%\n  summarise(\n    mean_sales = mean(sales),\n    mean_expenses = mean(expenses),\n    min_profit = min(expenses - sales),\n    max_profit = max(expenses - sales)\n  ) %>%\n  ungroup()\n\n`summarise()` has grouped output by 'year'. You can override using the\n`.groups` argument."
  },
  {
    "objectID": "posts/Data Wrangling/Data Wrangling.html#complications",
    "href": "posts/Data Wrangling/Data Wrangling.html#complications",
    "title": "Data Wrangling",
    "section": "Complications",
    "text": "Complications\n\nyear_prod %>%\n  mutate(across(.cols = mean_sales:max_profit, \n                .fns = round))\n\n# A tibble: 4 × 6\n  year  product mean_sales mean_expenses min_profit max_profit\n  <chr> <chr>        <dbl>         <dbl>      <dbl>      <dbl>\n1 2019  gadgets        882           238      -2632        517\n2 2019  widgets        789           452      -1307        150\n3 2020  gadgets       -199           804       -562       2390\n4 2020  widgets       -307          -220      -1105       2122\n\n\n\nround(0.5)\n\n[1] 0\n\nround(1.5)\n\n[1] 2\n\n\n\n#!!!!!! redefining round so 5s round up !!!!!! \nround <- function(x, digits = 0) {\n  posneg = sign(x)\n  z = abs(x)*10^digits\n  z = z + 0.5 + sqrt(.Machine$double.eps)\n  z = trunc(z)\n  z = z/10^digits\n  z*posneg\n}\n\n\n# remove new round() method\nrm(round)\n\n\nmissing_bad <- budget4 %>%\n  mutate(expenses = ifelse(\n    test = year == 2020 & region == \"South\", \n    yes = 0, # value if above conditions are met\n    no = expenses # value if above conditions are not met\n  ))\n\n\nmissing_bad <- budget4 %>%\n  mutate(expenses = case_when(\n    # set to 0 when year is 2020 and region is North\n    year == 2020 & region == \"South\" ~ 0, \n    # otherwise, set to the value in the expenses column\n    TRUE ~ expenses   \n  ))\n\n\n# set sales values to \"missing\" for North 2020 rows\nmissing_bad <- missing_bad %>%\n  mutate(sales = ifelse(year == 2020 & region == \"North\", \n                        \"missing\", \n                        sales))\n\n# check structure of data, sales now character\nstr(missing_bad)\n\ntibble [16 × 5] (S3: tbl_df/tbl/data.frame)\n $ region  : chr [1:16] \"North\" \"North\" \"North\" \"North\" ...\n $ product : chr [1:16] \"widgets\" \"widgets\" \"gadgets\" \"gadgets\" ...\n $ year    : chr [1:16] \"2019\" \"2020\" \"2019\" \"2020\" ...\n $ sales   : chr [1:16] \"2129\" \"missing\" \"723\" \"missing\" ...\n $ expenses: num [1:16] 822 -897 1037 1115 1004 ..."
  },
  {
    "objectID": "posts/Data Tidying/Data Tidying.html",
    "href": "posts/Data Tidying/Data Tidying.html",
    "title": "Data Tidying",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.0     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.1     ✔ tibble    3.1.8\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the \u001b]8;;http://conflicted.r-lib.org/\u0007conflicted package\u001b]8;;\u0007 to force all conflicts to become errors\n\n\n\nData structures\n\nuntidy_data <- read_csv(\"data/untidy_data.csv\", show_col_types = FALSE)\ntidy_data <- read_csv(\"data/tidy_data.csv\", show_col_types = FALSE)\n\n\ntidy_data %>%\n  group_by(customer_id) %>%\n  summarise(\n    total_items = sum(items),\n    total_price = sum(totalprice)\n  )\n\n# A tibble: 5 × 3\n  customer_id total_items total_price\n        <dbl>       <dbl>       <dbl>\n1           1          20       101. \n2           2           8        37.8\n3           3          14        67.2\n4           4          14        60.6\n5           5          20        98.9\n\n\n\n\nReshaping data\n\n# select just the customer ID and 3 total price columns\nwide_totalprice <- select(\n  .data = untidy_data,\n  customer_id, \n  `2018` = totalprice_2018,\n  `2019` = totalprice_2019,\n  `2020` = totalprice_2020\n)\n\n\nlong_totalprice <- pivot_longer(\n  data = wide_totalprice,\n  cols = `2018`:`2020`,\n  names_to = \"year\",\n  values_to = \"totalprice\")\n\n\nggplot(long_totalprice, aes(x = totalprice, fill = year)) +\n  geom_histogram(binwidth = 10, color = \"black\")\n\n\n\n\n\nlong_totalprice <- pivot_longer(\n  data = wide_totalprice, \n  cols = `2018`:`2020`, # columns to make long \n  names_to = \"year\", # new column name for headers\n  values_to = \"totalprice\" # new column name for values\n)\n\n\nwide_by_customer <- pivot_wider(\n  data = long_totalprice,\n  id_cols = year, # identifying column(s)\n  names_from = customer_id, # the new column names\n  names_prefix = \"C_\", # prefix for new column names\n  values_from = totalprice # the new column values\n)\n\n\n\nMuti-step tidying\n\nlonger_data <- pivot_longer(\n  data = untidy_data, \n  cols = itemsprice_2018:totalprice_2020, # columns to make long \n  names_to = c(\"category\", \"year\"), # new column names for cols\n  names_sep = \"_\", # how to split cols into new columns\n  # names_pattern = \"(.*)_(.*)\", # alternative to names_sep\n  values_to = \"value\", # new column name for values\n  \n  # make sure new columns are the right data type\n  names_transform = list(year = as.integer),\n  values_transform = list(value = as.character) \n)\n\n\nwider_data <- pivot_wider(\n  data = longer_data,\n  id_cols = c(customer_id, year),\n  names_from = category,\n  values_from = value\n)\n\n\nsplit_data <- separate(\n  data = wider_data, \n  col = itemsprice, # the column to split\n  into = c(\"items\", \"price_per_item\"), # the new columns to create\n  sep = \" \", # split col by space\n  remove = TRUE, # whether to remove to old col\n  convert = TRUE # whether to fix the data type of the new columns\n)\n\n\nmutated_data <- mutate(\n  .data = split_data,\n  price_per_item = stringr::str_replace_all(\n    string = price_per_item, \n    pattern = \"[()]\", \n    replacement = \"\"\n  )\n)\n\n\n# check the data types\nglimpse(mutated_data)\n\nRows: 15\nColumns: 5\n$ customer_id    <dbl> 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5\n$ year           <int> 2018, 2019, 2020, 2018, 2019, 2020, 2018, 2019, 2020, 2…\n$ items          <int> 2, 8, 10, 1, 6, 1, 4, 5, 5, 10, 1, 3, 3, 9, 8\n$ price_per_item <chr> \"3.91\", \"4.72\", \"5.59\", \"3.91\", \"4.72\", \"5.59\", \"3.91\",…\n$ totalprice     <chr> \"7.82\", \"37.76\", \"55.9\", \"3.91\", \"28.32\", \"5.59\", \"15.6…\n\n\n\ntidy_data <- type_convert(\n  df = mutated_data,\n  trim_ws = TRUE # removes spaces before and after values\n)\n\n\n── Column specification ────────────────────────────────────────────────────────\ncols(\n  price_per_item = col_double(),\n  totalprice = col_double()\n)\n\n# check the data types\nglimpse(tidy_data)\n\nRows: 15\nColumns: 5\n$ customer_id    <dbl> 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5\n$ year           <int> 2018, 2019, 2020, 2018, 2019, 2020, 2018, 2019, 2020, 2…\n$ items          <int> 2, 8, 10, 1, 6, 1, 4, 5, 5, 10, 1, 3, 3, 9, 8\n$ price_per_item <dbl> 3.91, 4.72, 5.59, 3.91, 4.72, 5.59, 3.91, 4.72, 5.59, 3…\n$ totalprice     <dbl> 7.82, 37.76, 55.90, 3.91, 28.32, 5.59, 15.64, 23.60, 27…\n\n\n\n\nPipes\n\nuntidy_data <- read_csv(\"data/untidy_data.csv\", \n                        show_col_types = FALSE)\n\nlonger_data <- pivot_longer(\n  data = untidy_data,\n  cols = itemsprice_2018:totalprice_2020,\n  names_to = c(\"category\", \"year\"),\n  names_sep = \"_\", \n  values_to = \"value\", \n  names_transform = list(year = as.integer),\n  values_transform = list(value = as.character) \n) \n\nwider_data <- pivot_wider(\n  data = longer_data,\n  id_cols = c(customer_id, year),\n  names_from = category,\n  values_from = value\n)\n\nsplit_data <- separate(\n  data = wider_data,\n  col = itemsprice,\n  into = c(\"items\", \"price_per_item\"),\n  sep = \" \", \n  remove = TRUE, \n  convert = TRUE\n) \n\nmutated_data <- mutate(\n  .data = split_data,\n  price_per_item = stringr::str_replace_all(\n    string = price_per_item, \n    pattern = \"[()]\", \n    replacement = \"\"\n  )\n) \n\ntidy_data <- type_convert(\n  df = mutated_data,\n  trim_ws = TRUE\n)\n\n\n── Column specification ────────────────────────────────────────────────────────\ncols(\n  price_per_item = col_double(),\n  totalprice = col_double()\n)\n\n\n\ntidy_data <- read_csv(file = \"data/untidy_data.csv\",\n                      show_col_types = FALSE) %>%\n  pivot_longer(\n    cols = itemsprice_2018:totalprice_2020,\n    names_to = c(\"category\", \"year\"),\n    names_sep = \"_\", \n    values_to = \"value\", \n    names_transform = list(year = as.integer),\n    values_transform = list(value = as.character) \n  ) %>%\n  pivot_wider(\n    id_cols = c(customer_id, year),\n    names_from = category,\n    values_from = value\n  ) %>%\n  separate(\n    col = itemsprice,\n    into = c(\"items\", \"price_per_item\"),\n    sep = \" \", \n    remove = TRUE, \n    convert = TRUE\n  ) %>%\n  mutate(\n    price_per_item = stringr::str_replace_all(\n      string = price_per_item, \n      pattern = \"[()]\", \n      replacement = \"\"\n    )\n  ) %>%\n  type_convert(\n    trim_ws = TRUE\n  )\n\n\n── Column specification ────────────────────────────────────────────────────────\ncols(\n  price_per_item = col_double(),\n  totalprice = col_double()\n)"
  },
  {
    "objectID": "posts/Practice Report/practice.html#number-of-reviews-by-year",
    "href": "posts/Practice Report/practice.html#number-of-reviews-by-year",
    "title": "Video game review report",
    "section": "Number of reviews by year",
    "text": "Number of reviews by year\nThe below histogram shows the number of video game reviews submitted to Amazon by year. From 1999 reviews largely increased year-on-year which is unsurprising given the growth of Amazon and access to the internet. The dataset shows the peak number of reviews was 2015 with a decline from 2016 to 2018. It is likely that this reflects the dataset being incomplete for recent years rather than the number of reviews declining in reality."
  },
  {
    "objectID": "posts/Practice Report/practice.html#verified-users",
    "href": "posts/Practice Report/practice.html#verified-users",
    "title": "Video game review report",
    "section": "Verified users",
    "text": "Verified users\nThe dataset contains details of whether the review was based on a verified purchase. From Amazon Community:\n\nAn “Amazon Verified Purchase” review means that we’ve verified that the person writing the review purchased the product from Amazon, and didn’t receive the product at a big discount. Reviews that are not marked “Amazon Verified Purchase” are valuable as well, but, either we cannot confirm that the product was purchased from Amazon, or that the customer paid a price that is available to most Amazon shoppers.\n\nTable 1 shows the number of reviews based on verified and unverified purchases.\n\n\n\n\n\nverified\ncounts\n\n\n\n\nFALSE\n164932\n\n\nTRUE\n332645\n\n\n\n\n\nWhilst the number of verified reviews is substantially larger than the number of unverified reviews, the below histogram demonstrates that this has not been a consistent trend and that the large increase in the number of reviews is largely driven by an increase in verified reviews.\n\n\n`summarise()` has grouped output by 'year'. You can override using the\n`.groups` argument."
  },
  {
    "objectID": "posts/Practice Report/practice.html#review-ratings",
    "href": "posts/Practice Report/practice.html#review-ratings",
    "title": "Video game review report",
    "section": "Review ratings",
    "text": "Review ratings\n\nOverall\nAmazon review ratings are provided on a scale of 1 (worst) to 5 (best) stars. The histogram below shows the total number of reviews assigned each rating.\n\n\n\n\n\n\n\nBy purchase status\nHowever, if you break this data down by verified purchases status you can see that whilst the number of verified and unverified reviews with 1 to 4 star reviews are similar, there is a very large number of 5 star reviews for verified purchases compared to unverified purchases.\n\n#Get number of reviews per year\n\nrating_by_verified_counts <- review_data %>%\n\n  group_by(rating,verified) %>%\n\n  summarize(counts = n())\n\n`summarise()` has grouped output by 'rating'. You can override using the\n`.groups` argument.\n\n#ggplot(data = reviews_by_year, mapping = aes(x=year, y=counts))\n\n#ggplot(reviews_by_year, aes(x=year, y=counts))\n\n# plot\n\nggplot(data = rating_by_verified_counts, \n\n       mapping = aes(x=rating, \n\n                     y=counts, \n\n                     group = verified,\n\n                     fill = verified))+\n\n  geom_bar(stat= \"identity\", position = \"dodge\")+\n\n  xlab(\"\")+\n\n  ylab(\"\")+\n\n  ggtitle(\"Review Ratings\",\n\n          subtitle = \"By purchase status\")+\n\n  theme(\n\n    panel.background = element_rect(fill = \"lightgrey\",\n\n                                colour = \"lightgrey\",\n\n                                linewidth = 0.5, linetype = \"solid\"),\n\n    panel.grid.major=element_line(colour=\"black\",linewidth = .05),\n\n    panel.grid.minor=element_line(colour=\"lightgrey\"))"
  },
  {
    "objectID": "posts/prsentations/presenation.html#going-to-sleep",
    "href": "posts/prsentations/presenation.html#going-to-sleep",
    "title": "Habits",
    "section": "Going to sleep",
    "text": "Going to sleep\n\nGet in bed\nCount sheep"
  },
  {
    "objectID": "posts/Tidy Tuesday/Tidy Tuesday.html",
    "href": "posts/Tidy Tuesday/Tidy Tuesday.html",
    "title": "Tidy Tuesday",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.0     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.1     ✔ tibble    3.1.8\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the \u001b]8;;http://conflicted.r-lib.org/\u0007conflicted package\u001b]8;;\u0007 to force all conflicts to become errors\n\ntuesdata <- tidytuesdayR::tt_load('2023-05-02')\n\n--- Compiling #TidyTuesday Information for 2023-05-02 ----\n--- There are 3 files available ---\n--- Starting Download ---\n\n\n\n    Downloading file 1 of 3: `plots.csv`\n    Downloading file 2 of 3: `species.csv`\n    Downloading file 3 of 3: `surveys.csv`\n\n\n--- Download complete ---\n\nplots <- tuesdata$plots\nspecies <- tuesdata$species\nsurveys <- tuesdata$surveys\n\n\nmice_count_by_year <- surveys %>%\n  group_by(year) %>%\n  count()\n\nggplot(mice_count_by_year, aes(x= year, y=n))+\n  geom_line()+\n  ggtitle (\"Mice count by year\")+\n  scale_x_continuous(breaks =seq(1980, 2020,5))\n\n\n\n\n\nBob Ross Paintings"
  },
  {
    "objectID": "posts/Final/Final Report.html",
    "href": "posts/Final/Final Report.html",
    "title": "Final Report (Tidy Tuesday)",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.0     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.1     ✔ tibble    3.1.8\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the \u001b]8;;http://conflicted.r-lib.org/\u0007conflicted package\u001b]8;;\u0007 to force all conflicts to become errors\n\n#ArtHistorytidytuesday\n\ntuesdata <- tidytuesdayR::tt_load('2023-01-17')\n\n--- Compiling #TidyTuesday Information for 2023-01-17 ----\n--- There is 1 file available ---\n--- Starting Download ---\n\n\n\n    Downloading file 1 of 1: `artists.csv`\n\n\n--- Download complete ---\n\narthistory <-tuesdata[[\"artists\"]]\n\ncount_of_artists <- arthistory %>%\n  group_by(year) %>%\n  count()\n\ncount_of_artistsggplot <- ggplot(count_of_artists, aes(x= year, y=n)) +\n  geom_bar(stat=\"identity\",position=\"dodge\", fill=\"darkgreen\") +\n  scale_x_continuous(breaks = seq(1925,2025,25))+\n  scale_y_continuous(breaks =seq(0,200, 50))+\n  ggtitle(\"Overall Count of Artists in Gardener's Art Throughout the Ages\")+\n  ylab(\"Count\")+\n  xlab(\"Year of Publication\")\n\ncount_of_artistsggplot"
  },
  {
    "objectID": "posts/prsentations/presenation.html",
    "href": "posts/prsentations/presenation.html",
    "title": "Habits",
    "section": "",
    "text": "Turn off alarm\nGet out of bed\n\n\n\n\nGet in bed\nCount sheep"
  },
  {
    "objectID": "posts/prsentations/presenation.html#what-is-my-favorite-food-background-httpswww.google.comurlsaiurlhttps3a2f2fwww.news10.com2fnews2fscience2fpolish-institute-classifies-cats-as-alien-invasive-species2fpsigaovvaw1onwmo5jkyf1ositcrhc7hust1684272114914000sourceimagescdvfeved0cbaqjrxqfwotcpjk_9ug-p4cfqaaaaadaaaaabae",
    "href": "posts/prsentations/presenation.html#what-is-my-favorite-food-background-httpswww.google.comurlsaiurlhttps3a2f2fwww.news10.com2fnews2fscience2fpolish-institute-classifies-cats-as-alien-invasive-species2fpsigaovvaw1onwmo5jkyf1ositcrhc7hust1684272114914000sourceimagescdvfeved0cbaqjrxqfwotcpjk_9ug-p4cfqaaaaadaaaaabae",
    "title": "Presentation",
    "section": "What is my favorite food? {background-https://www.google.com/url?sa=i&url=https%3A%2F%2Fwww.news10.com%2Fnews%2Fscience%2Fpolish-institute-classifies-cats-as-alien-invasive-species%2F&psig=AOvVaw1onWMo5jKYF1oSitcRhc7H&ust=1684272114914000&source=images&cd=vfe&ved=0CBAQjRxqFwoTCPjk_9ug-P4CFQAAAAAdAAAAABAE}",
    "text": "What is my favorite food? {background-https://www.google.com/url?sa=i&url=https%3A%2F%2Fwww.news10.com%2Fnews%2Fscience%2Fpolish-institute-classifies-cats-as-alien-invasive-species%2F&psig=AOvVaw1onWMo5jKYF1oSitcRhc7H&ust=1684272114914000&source=images&cd=vfe&ved=0CBAQjRxqFwoTCPjk_9ug-P4CFQAAAAAdAAAAABAE}\n\nVodka Pasta currently ofc without Vodka :D\nKorean chicken. Plz try bbq chicken in nyc. sooo good."
  },
  {
    "objectID": "posts/prsentations/presenation.html#my-fav-thing-about-this-class",
    "href": "posts/prsentations/presenation.html#my-fav-thing-about-this-class",
    "title": "posts",
    "section": "My fav thing about this class",
    "text": "My fav thing about this class\n\nlearned about google color picker\nbeautiful graphs"
  },
  {
    "objectID": "posts/prsentations/presenation.html#what-is-my-favorite-food-background-cat.jpg",
    "href": "posts/prsentations/presenation.html#what-is-my-favorite-food-background-cat.jpg",
    "title": "Presentation",
    "section": "What is my favorite food? {background-“Cat.jpg”}",
    "text": "What is my favorite food? {background-“Cat.jpg”}\n\nVodka Pasta currently ofc without Vodka :D\nKorean chicken. Plz try bbq chicken in nyc. sooo good."
  },
  {
    "objectID": "posts/prsentations/presenation.html#what-is-my-favorite-food",
    "href": "posts/prsentations/presenation.html#what-is-my-favorite-food",
    "title": "posts",
    "section": "What is my favorite food?",
    "text": "What is my favorite food?\n\nVodka Pasta currently ofc without Vodka :D\nKorean chicken. Plz try bb.q chicken in nyc. sooo good."
  },
  {
    "objectID": "posts/prsentations/presenation.html#what-is-my-favorite-food-backgroundurlcat.jpg",
    "href": "posts/prsentations/presenation.html#what-is-my-favorite-food-backgroundurlcat.jpg",
    "title": "Presentation",
    "section": "What is my favorite food? {background:url(“Cat.jpg”}",
    "text": "What is my favorite food? {background:url(“Cat.jpg”}\n\nVodka Pasta currently ofc without Vodka :D\nKorean chicken. Plz try bbq chicken in nyc. sooo good."
  },
  {
    "objectID": "posts/prsentations/presenation.html#what-is-my-favorite-foodbackground-imagecat.jpg",
    "href": "posts/prsentations/presenation.html#what-is-my-favorite-foodbackground-imagecat.jpg",
    "title": "posts",
    "section": "What is my favorite food?{background-image:(‘Cat.jpg’)}",
    "text": "What is my favorite food?{background-image:(‘Cat.jpg’)}\n\nVodka Pasta currently ofc without Vodka :D\nKorean chicken. Plz try bbq chicken in nyc. sooo good."
  },
  {
    "objectID": "posts/presentations/presenation.html#what-is-my-favorite-food",
    "href": "posts/presentations/presenation.html#what-is-my-favorite-food",
    "title": "Reveal Js",
    "section": "What is my favorite food?",
    "text": "What is my favorite food?\n\nVodka Pasta currently ofc without Vodka :D\nKorean chicken. Plz try bb.q chicken in nyc. sooo good."
  },
  {
    "objectID": "posts/presentations/presenation.html#my-fav-thing-about-this-class",
    "href": "posts/presentations/presenation.html#my-fav-thing-about-this-class",
    "title": "Reveal Js",
    "section": "My fav thing about this class",
    "text": "My fav thing about this class\n\nlearned about google color picker\nbeautiful graphs\nobviously more"
  }
]