[
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "posts",
    "section": "",
    "text": "Data Import\n\n\n\n\n\n\n\n\n\n\n\n\nShifa Maqsood\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDates and Times\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\nMidterm Part 2\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\nData Vis\n\n\n\n\n\n\n\n\n\n\n\n\nShifa Maqsood\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDates and Times\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\nData Vis\n\n\n\n\n\n\n\n\n\n\n\n\nShifa Maqsood\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 3 qmd skill check\n\n\n\n\n\n\n\n\n\n\n\n\nShifa Maqsood\n\n\n\n\n\n\n  \n\n\n\n\nNotes for class\n\n\n\n\n\n\n\n\n\n\n\n\nShifa Maqsood\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMidterm project part 1\n\n\n\n\n\n\n\n\n\n\n\n\nShifa Maqsood\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Data Analytics Blog",
    "section": "",
    "text": "This blog is for weekly assignments"
  },
  {
    "objectID": "posts/new/index.html",
    "href": "posts/new/index.html",
    "title": "Notes for class",
    "section": "",
    "text": "Learn more about push and pull about git\nmake a change, commit and push the change.\nMake changes to you to ur file.\nRender your websites.\nCommit the changes.\nPush to the origin\nRstudio IDE is a great resource.\nA reproducible report allows others to understand and check your work.\nnever install a package inside of the script\nthere is another easy way to use a function. You can simply use package::function()\nWhenever you put comma in a function, it means you are giving different arguments to it. For example, mean(x=1,2,3,4,5) means more than one argument"
  },
  {
    "objectID": "posts/week 3 qmd skills /index.html",
    "href": "posts/week 3 qmd skills /index.html",
    "title": "Week 3 qmd skills",
    "section": "",
    "text": "Be able to make a new .qmd document\nBe able to render a .qmd document\nBe able to insert simple markdown plain text (headers, lists, paragraphs), and render the document.\n\n#This is a first level header ##This is a second level header 4. Be aware of resources to help you learn more about markdown options. 5. Be able to insert an R code chunk, and show the output in the rendered document. - macro for quick insert 6. Running R code chunks in a qmd - pressing play - copy/paste into console - highlight then command-enter (mac) - precedence issues (first to last) 7. Be aware of R code chunk options, and how to use eval, messages, error, warning, and echo. 8. Be able to set code chunk options per chunk, and/or for the whole document. Understand rules for precedence (which options will apply if both are set.) 9. Write inline r code. 10. Explain how the rendering environment is different from the Rstudio environment. 11. Be aware of more advanced quarto options for html documents, and try some of the options."
  },
  {
    "objectID": "posts/Tipsheet post /index.html",
    "href": "posts/Tipsheet post /index.html",
    "title": "Notes for class",
    "section": "",
    "text": "Learn more about push and pull about git\nmake a change, commit and push the change.\nMake changes to you to ur file.\nRender your websites.\nCommit the changes.\nPush to the origin\nRstudio IDE is a great resource.\nA reproducible report allows others to understand and check your work.\nnever install a package inside of the script\nthere is another easy way to use a function. You can simply use package::function()\nWhenever you put comma in a function, it means you are giving different arguments to it. For example, mean(x=1,2,3,4,5) means more than one argument\nc() function has many uses\nAssigning things to our objects “<-”\nas.numeric turns strings into numbers"
  },
  {
    "objectID": "posts/week 3 qmd skills /week 3 qmd skill check.html",
    "href": "posts/week 3 qmd skills /week 3 qmd skill check.html",
    "title": "Week 3 qmd skill check",
    "section": "",
    "text": "1. Be able to make a new .qmd document\nYes.I copied my welcome post, and then renamed it\n2. Be able to render a .qmd document\nI was able to do that\n3. Explain the difference between the source editor view and visual editor view in Rstudio.\nSource editor is where you usually do coding so it is more like the underlying code , and visual editor kind of already shows how the ouput will look like on webpage and it can be confusing for a beginner\n4. Be able to insert simple markdown plain text (headers, lists, paragraphs), and render the document.\n#This is a Header\nstrikethrough\nthis is bold text\nhttps://quarto.org\n\nunordered list + sub-item 1 + sub-item 2\n\nsub-sub-item 1\n\n\n5. Be aware of resources to help you learn more about markdown options.\nYes\n6. Be able to insert an R code chunk, and show the output in the rendered document.\n\nmacro for quick insert\ncommand-option-i\n\n\n\n[1] 6\n\n\n7. Running R code chunks in a qmd - pressing play- Yes - copy/paste into console - Done - highlight then command-enter (mac) yes - precedence issues (first to last) yes\n8. Be aware of R code chunk options, and how to use eval, messages, error, warning, and echo.\nYes. I used echo in the code chunk above.\n9. Be able to set code chunk options per chunk, and/or for the whole document. Understand rules for precedence (which options will apply if both are set.)\nThere is a couple of code chunks options that you can use for some for example eval=false can be used to just display the function and not evaluate. You can also have a code chunk at the top of the document as well.\n10. Write inline r code.\nToday’s date is 2023-02-15\n11. Explain how the rendering environment is different from the Rstudio environment.\nRstudio environment is more like about how it would look as a website, but Rstudio environment shows all the values and the objects assigned to them.\n12. Be aware of more advanced quarto options for html documents, and try some of the options.\nYes"
  },
  {
    "objectID": "posts/Midterm Project part 2/Midterm part 2.html",
    "href": "posts/Midterm Project part 2/Midterm part 2.html",
    "title": "Midterm Part 2",
    "section": "",
    "text": "##Easy problem\nProblem 1: List all of the odd numbers from 1 to 100. you could use the seq() function How could you do this without using the seq() function? Consider using the mod function %%, which evaluates whether or not there is a remainder when dividing one number by another.\n\nfor (i in 1:100){\n  if(i%%2)\n    print(i)\n}\n\n[1] 1\n[1] 3\n[1] 5\n[1] 7\n[1] 9\n[1] 11\n[1] 13\n[1] 15\n[1] 17\n[1] 19\n[1] 21\n[1] 23\n[1] 25\n[1] 27\n[1] 29\n[1] 31\n[1] 33\n[1] 35\n[1] 37\n[1] 39\n[1] 41\n[1] 43\n[1] 45\n[1] 47\n[1] 49\n[1] 51\n[1] 53\n[1] 55\n[1] 57\n[1] 59\n[1] 61\n[1] 63\n[1] 65\n[1] 67\n[1] 69\n[1] 71\n[1] 73\n[1] 75\n[1] 77\n[1] 79\n[1] 81\n[1] 83\n[1] 85\n[1] 87\n[1] 89\n[1] 91\n[1] 93\n[1] 95\n[1] 97\n[1] 99\n\n\nProblem 2 : Generate 100 random numbers within a specific range runif can do this\n\nrunif(100,1,100)\n\n  [1] 21.258418 50.964043 70.903722 87.173210 16.695212 73.073811 51.046567\n  [8] 39.451603 51.658284 74.905202 66.248468 10.678605 95.053985  3.421871\n [15] 42.618388 82.072405 63.689877 70.684758 81.133528 78.954426  8.815671\n [22] 36.181748 88.308323 60.945155 35.485430 28.339058 87.497961 64.148747\n [29] 63.349227 54.643512 10.896349 98.572054 94.208854 79.280627 30.030701\n [36] 43.366495 11.911864 88.027844 44.558063 49.139229 54.142750 28.805858\n [43] 93.652578 68.698916 75.197829 79.751025  3.656771 31.540686 12.439891\n [50]  2.622655 77.230015 23.678032 16.078053 63.347620 23.303808 10.127948\n [57] 94.313371 33.453750 22.613649 70.028861 45.571322 86.708065 76.358984\n [64] 12.787500 12.843111 36.756489 76.875462 37.734986 16.314075 15.441524\n [71] 67.254281 47.619489 75.919205 40.616242 39.571526 46.006636 33.143976\n [78] 47.963601 92.627850 21.849036 58.868373 23.488515 84.707954 71.111479\n [85] 47.539405 98.833812 77.920700 41.153195 98.755082  5.994807 27.833196\n [92] 11.364102 27.547417 20.291137 35.913706 51.235124  6.868133  9.588367\n [99]  4.304036 33.328631\n\n\nProblem 3: reate a variable that stores a 20x20 matrix of random numbers"
  },
  {
    "objectID": "posts/Midterm Project part 1/Midterm project part 1.html",
    "href": "posts/Midterm Project part 1/Midterm project part 1.html",
    "title": "Midterm project part 1",
    "section": "",
    "text": "Q. Write a blog post where you demonstrate your ability to use these basic programming concepts in R.\n1. R objects: show that you understand and can create/use objects of various types, including at least: character/string, numeric, integer, logical, data.frame, and list. Show that you can index objects appropriately (e.g., locate elements of an object, change elements of an object etc.)\n2. Logical operations: show that you understand and can use logical operators in R (e.g., == | > < >= <=)\n3. Loops: Show that you understand the components of a for loop, and that you can use a for loop.\nThere are three types of loops, for loop, while loop and repeat loops. For loop is the commonly used loop. The syntax is\n\nj <- c(3,6,7,8)\nfor (i in j ){\n  i<- i^2 \n  print(i)\n}\n\n[1] 9\n[1] 36\n[1] 49\n[1] 64\n\n\n4. Functions: Show that you understand the syntax for declaring your own function, and that you can declare and run your own custom function to accomplish some task (you choose what the function does)."
  },
  {
    "objectID": "posts/Data Visualization/Data Visual.html",
    "href": "posts/Data Visualization/Data Visual.html",
    "title": "Data Vis",
    "section": "",
    "text": "#Data types\nThere are different data types in R: numeric, character, and logical\nNumeric data\nIt has two type: integer and double\nIntegers do not have decimal point and double do.\n\nnumeric_data <-c(10.4,7,4) #DOUBLE\ntypeof(numeric_data[1])\n\n[1] \"double\"\n\ntypeof(numeric_data[2])\n\n[1] \"double\"\n\ntypeof(numeric_data[3])\n\n[1] \"double\"\n\nis.numeric(numeric_data[3]) #to check the data type. retuns false or true\n\n[1] TRUE\n\ntypeof(7L)\n\n[1] \"integer\"\n\n\nCharacter data\nCharacters are also called strings. Anything between quotation marks “” is treated as character\n\ntypeof(\"what is the date today?\") #tells the type of data\n\n[1] \"character\"\n\nmy_string <- \"The instructor said, \\\"R is cool,\\\" and the class agreed.\"\ncat(my_string) # cat() prints the arguments\n\nThe instructor said, \"R is cool,\" and the class agreed.\n\n\nLogical\n\nx<- c(4,5,6,7) #this one asks if 7 is found in the object x\n 7 %in% x \n\n[1] TRUE\n\nclass(TRUE) #it tells that the class of true is logical\n\n[1] \"logical\"\n\n\nFactor data When you use factor, you are telling R that this is categorical data with levels. This can be very helpful in various types of statistical analysis.\n\nmyfactor <- factor(\"B\", levels = c(\"A\", \"B\",\"C\")) # B is a factor which has three levels A,B and C\nmyfactor \n\n[1] B\nLevels: A B C\n\n\n#Tidy data\nUntidy data can be hard for us and the computer to read and do anlaysis on it. In tidy data, every column is variable, every row is an observation and every cell is a single value.\n\nuntidy_data <- read.csv(\"CopyOfdata/untidy_data.csv\")\n\n\nuntidy_data\n\n  customer_id itemsprice_2018 itemsprice_2019 itemsprice_2020 totalprice_2018\n1           1        2 (3.91)        8 (4.72)       10 (5.59)            7.82\n2           2        1 (3.91)        6 (4.72)        1 (5.59)            3.91\n3           3        4 (3.91)        5 (4.72)        5 (5.59)           15.64\n4           4       10 (3.91)        1 (4.72)        3 (5.59)           39.10\n5           5        3 (3.91)        9 (4.72)        8 (5.59)           11.73\n  totalprice_2019 totalprice_2020\n1           37.76           55.90\n2           28.32            5.59\n3           23.60           27.95\n4            4.72           16.77\n5           42.48           44.72\n\n#This is an example of untidy data. \n#It shows that itemprice has two values in each cell\n#It is hard to read as it shows the data for all three years repeatedly which can be confusing to analyze.\n\n\ntidy_data <- read.csv(\"CopyOfdata/tidy_data.csv\")\n\ntidy_data #This is an example of tidy data. It shows how each observatio ihas its own row and each value has its own cell.\n\n   customer_id year items price_per_item totalprice\n1            1 2018     2           3.91       7.82\n2            1 2019     8           4.72      37.76\n3            1 2020    10           5.59      55.90\n4            2 2018     1           3.91       3.91\n5            2 2019     6           4.72      28.32\n6            2 2020     1           5.59       5.59\n7            3 2018     4           3.91      15.64\n8            3 2019     5           4.72      23.60\n9            3 2020     5           5.59      27.95\n10           4 2018    10           3.91      39.10\n11           4 2019     1           4.72       4.72\n12           4 2020     3           5.59      16.77\n13           5 2018     3           3.91      11.73\n14           5 2019     9           4.72      42.48\n15           5 2020     8           5.59      44.72\n\n\n#GGplot\nGGplot is part of the package tidyverse and frequently used for plots.\n\nlibrary(ggplot2)\n\nsurvey_data <- read.csv(\"https://psyteachr.github.io/ads-v2/data/survey_data.csv\")\n\nsurvey_ggplot <- ggplot(survey_data, aes(x = wait_time, y = call_time)) +\n  geom_point(colour= \"red\") +\n  geom_smooth(method =lm) + \n  \n  scale_x_continuous(name = \"Wait Time (seconds)\",\n                     breaks = seq(from=0, to= 600, by=60))+\n  \n  scale_y_continuous(name = \"Call time (seconds)\",\n                     breaks = seq(from = 0, to = 600, by = 30))+\n  labs(title = \"The relationship between wait time and call time\",\n       subtitle = \"2020 Call Data\",\n       caption = \"Figure 1. As wait time increases, call time increases.\")\n  \n\n\nsurvey_ggplot\n\n`geom_smooth()` using formula 'y ~ x'"
  }
]