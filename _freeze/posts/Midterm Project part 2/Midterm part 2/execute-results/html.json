{
  "hash": "48d160d142122bf94e9acd4064c8d8d1",
  "result": {
    "markdown": "---\ntitle: \"Midterm Part 2\"\nautor: \"Shifa Maqsood\"\nimage: \"Unknown.png\"\n---\n\n\n#Easier problems\n\nProblem 1: List all of the odd numbers from 1 to 100. you could use the seq() function How could you do this without using the seq() function? Consider using the mod function %%, which evaluates whether or not there is a remainder when dividing one number by another.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (i in 1:100){\n  if(i%%2)\n    print(i)\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n[1] 3\n[1] 5\n[1] 7\n[1] 9\n[1] 11\n[1] 13\n[1] 15\n[1] 17\n[1] 19\n[1] 21\n[1] 23\n[1] 25\n[1] 27\n[1] 29\n[1] 31\n[1] 33\n[1] 35\n[1] 37\n[1] 39\n[1] 41\n[1] 43\n[1] 45\n[1] 47\n[1] 49\n[1] 51\n[1] 53\n[1] 55\n[1] 57\n[1] 59\n[1] 61\n[1] 63\n[1] 65\n[1] 67\n[1] 69\n[1] 71\n[1] 73\n[1] 75\n[1] 77\n[1] 79\n[1] 81\n[1] 83\n[1] 85\n[1] 87\n[1] 89\n[1] 91\n[1] 93\n[1] 95\n[1] 97\n[1] 99\n```\n:::\n:::\n\n\nProblem 2 : Generate 100 random numbers within a specific range runif can do this\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrunif(100,1,100)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  [1] 33.120829 11.896967 19.415353 50.589755 77.228669 95.622781  3.669065\n  [8] 76.852002 60.223599 27.964026 67.960080 19.905128 46.424167 61.918571\n [15] 92.148127 34.197386 97.503413 98.473695 74.130158 61.312863  5.291779\n [22]  4.008336  9.421220  7.582252 43.291974 57.419260 32.246282 25.090425\n [29] 70.237259 30.173052 14.526447 21.574690 58.541599 57.236245 33.095637\n [36]  6.809637 11.677427 13.039047 66.440271 15.659806  1.712580  4.729164\n [43] 78.420404 81.791119 69.453659 15.717039 65.732153 57.535243 61.204469\n [50] 52.919830 59.841390 61.423579 47.937576 15.025014 97.023658 90.946999\n [57]  6.591146 45.635287 14.015059 75.121684 33.768011 95.946949 79.831672\n [64] 87.956409 83.932712 41.167302 77.054032 30.925421 81.893093 21.682476\n [71] 59.232083 40.364756 35.998782 86.572747 65.326694 56.946283 48.053602\n [78]  8.832390 48.715849 58.778630 54.986016 88.088183 81.392389 57.200159\n [85] 68.454320  9.872646  1.913512 72.759080 22.786283 84.941448 86.661339\n [92] 43.678315 10.394851 99.809831 93.434756 91.698799 83.654608  4.847305\n [99]  4.931941 99.281867\n```\n:::\n:::\n\n\nProblem 3: Create a variable that stores a 20x20 matrix of random numbers\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrandom_num <-matrix(runif(400, min=3,max=45), nrow = 20, ncol=20)\n```\n:::\n\n\n#Harder problems\n\nProblem 1: FizzBuzz List the numbers from 1 to 100 with the following constraints.\n\nThis question can be solved using for loop and if else statements\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfizzb <- c(1:100)\nfor (i in 1:length(fizzb)){\n  fizzb[i] <-i\n  if(i%%3 == 0 & i%%5== 0){\n    fizzb[i] =\"FizzBuzz\"\n  } else if (i%%3 ==0){\n    fizzb[i] =\"Fizz\"\n  }\nelse if (i%%5 ==0 )\n  fizzb[i] = \"Buzz\"\n}\n```\n:::\n\n\n\nProblem 2: Assume that a pair of dice are rolled. Using monte carlo-simulation, compute the probabilities of rolling a 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, and 12, respectively.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndice1 <- replicate(1000,(sample(1:6,1,replace= TRUE)))\ndice2 <-replicate(1000,(sample(1:6,1,replace= TRUE)))\nsim <- c()\ncombined <- dice1+dice2\nsim <- table(combined)/1000\n```\n:::\n\n\nProblem 3: Multiplication table\n\nGenerate a matrix for a multiplication table. For example, the labels for the columns could be the numbers 1 to 10, and the labels for the rows could be the numbers 1 to 10. The contents of each of the cells in the matrix should be correct answer for multiplying the column value by the row value.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmultiplication_table <-matrix(NA, nrow=10, ncol=10)\ncolnames(multiplication_table) <- c(\"1\", \"2\", \"3\" ,\"4\", \"5\", \"6\", \"7\",\"8\",\"9\",\"10\")\n\nrownames(multiplication_table) <- c(\"1\", \"2\", \"3\" ,\"4\", \"5\", \"6\", \"7\",\"8\",\"9\",\"10\")\n\nfor(i in 1:10) {\n  for(j in 1:10) {\n   multiplication_table[i, j] = (i*j)\n  }\n}\n```\n:::\n\n\nProblem 4:\n\nsnakes and ladders. how do you add in a representaion of the board, so that you change which square the player is on depending on whether they land on a ladder or snake.\n\ntry doing it for one ladder\n\nso i could do something like if number of roll is ==3 then do this cuz curpos is not interacting with my dice roll\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsave_rolls <- c()\nfor(sims in 1:100){\ncurpos<-0\nnumber_of_rolls<-0\n\nwhile(curpos < 25){\n    curpos <- curpos+sample(c(1,2,3,4,5,6),1)\n   if (curpos == 3){\n     curpos <-11\n   }\n    if (curpos == 6){\n      curpos <- 17\n    }\n    if (curpos == 10){\n      curpos <- 12\n    }\n    if (curpos == 14){\n      curpos <- 4\n    }\n    if (curpos ==19){\n      curpos <-8\n    }\n    if(curpos == 22){\n      curpos <- 20\n    }\n    if (curpos ==24){\n      curpos <- 16\n    }\n  number_of_rolls <- number_of_rolls+1\n}\nsave_rolls[sims] <- number_of_rolls\n}\nmean(save_rolls)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 9.52\n```\n:::\n:::\n\n\nthe end. ",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}