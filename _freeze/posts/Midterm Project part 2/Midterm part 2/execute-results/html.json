{
  "hash": "c6b3c51c41844cf97768d96a1143f404",
  "result": {
    "markdown": "---\ntitle: \"Midterm Part 2\"\nautor: \"Shifa Maqsood\"\nimage: \"Unknown.png\"\n---\n\n\n#Easier problems\n\nProblem 1: List all of the odd numbers from 1 to 100. you could use the seq() function How could you do this without using the seq() function? Consider using the mod function %%, which evaluates whether or not there is a remainder when dividing one number by another.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (i in 1:100){\n  if(i%%2)\n    print(i)\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n[1] 3\n[1] 5\n[1] 7\n[1] 9\n[1] 11\n[1] 13\n[1] 15\n[1] 17\n[1] 19\n[1] 21\n[1] 23\n[1] 25\n[1] 27\n[1] 29\n[1] 31\n[1] 33\n[1] 35\n[1] 37\n[1] 39\n[1] 41\n[1] 43\n[1] 45\n[1] 47\n[1] 49\n[1] 51\n[1] 53\n[1] 55\n[1] 57\n[1] 59\n[1] 61\n[1] 63\n[1] 65\n[1] 67\n[1] 69\n[1] 71\n[1] 73\n[1] 75\n[1] 77\n[1] 79\n[1] 81\n[1] 83\n[1] 85\n[1] 87\n[1] 89\n[1] 91\n[1] 93\n[1] 95\n[1] 97\n[1] 99\n```\n:::\n:::\n\n\nProblem 2 : Generate 100 random numbers within a specific range runif can do this\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrunif(100,1,100)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  [1] 93.196150 40.103824 99.608201  3.650588 34.409851 32.158707 67.194957\n  [8] 94.847158 49.084110 35.436538 54.216478 48.309134 43.322944 81.361770\n [15]  4.040518 28.261435 64.324480 99.281394 50.331711 22.528186 38.526801\n [22] 90.572363 84.246129  4.205521 47.071087 47.584610 69.083983 78.323553\n [29]  8.675619 40.665314 16.738878 95.157582 11.525182 43.274326 69.554281\n [36] 29.480298 10.784423 94.162945 88.095303 98.467355 14.772120 66.427740\n [43] 33.537392 84.228487 79.941065 46.057244 72.950602 36.726476 30.181683\n [50] 44.122606 83.771231 74.074494 94.910284 26.216149  9.773446 32.235727\n [57] 43.273278 21.064928 40.071358 94.957919 35.638419 37.114205 28.155713\n [64] 36.641489 33.657482 11.397725 50.739089 42.922491 24.157475 52.832647\n [71] 10.238034 96.500270 86.058171  2.529555 32.467617  8.108295 39.156615\n [78] 34.082822 51.754592 34.394322 84.024949 43.073672 87.345685 33.138352\n [85] 39.993771 85.525102 96.959151 25.628987 19.565732 81.457261 52.753240\n [92] 86.456000 51.704717  3.522147 49.151568 17.830414 18.215342 11.437206\n [99] 85.202503 99.524868\n```\n:::\n:::\n\n\nProblem 3: Create a variable that stores a 20x20 matrix of random numbers\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrandom_num <-matrix(runif(400, min=3,max=45), nrow = 20, ncol=20)\n```\n:::\n\n\n#Harder problems\n\nProblem 1: FizzBuzz List the numbers from 1 to 100 with the following constraints.\n\nThis question can be solved using for loop and if else statements\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfizzb <- c(1:100)\nfor (i in 1:length(fizzb)){\n  fizzb[i] <-i\n  if(i%%3 == 0 & i%%5== 0){\n    fizzb[i] =\"FizzBuzz\"\n  } else if (i%%3 ==0){\n    fizzb[i] =\"Fizz\"\n  }\nelse if (i%%5 ==0 )\n  fizzb[i] = \"Buzz\"\n}\n```\n:::\n\n\nProblem 2:\n\n\n::: {.cell}\n\n```{.r .cell-code}\na<-runif(10000000,0,100)\nhist(a)\n```\n\n::: {.cell-output-display}\n![](Midterm-part-2_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nProblem 3: Assume that a pair of dice are rolled. Using monte carlo-simulation, compute the probabilities of rolling a 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, and 12, respectively.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndice1 <- replicate(1000,(sample(1:6,1,replace= TRUE)))\ndice2 <-replicate(1000,(sample(1:6,1,replace= TRUE)))\nsim <- c()\ncombined <- dice1+dice2\nsim <- table(combined)/1000\n```\n:::\n\n\nProblem 4: Multiplication table\n\nGenerate a matrix for a multiplication table. For example, the labels for the columns could be the numbers 1 to 10, and the labels for the rows could be the numbers 1 to 10. The contents of each of the cells in the matrix should be correct answer for multiplying the column value by the row value.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmultiplication_table <-matrix(NA, nrow=10, ncol=10)\ncolnames(multiplication_table) <- c(\"1\", \"2\", \"3\" ,\"4\", \"5\", \"6\", \"7\",\"8\",\"9\",\"10\")\n\nrownames(multiplication_table) <- c(\"1\", \"2\", \"3\" ,\"4\", \"5\", \"6\", \"7\",\"8\",\"9\",\"10\")\n\nfor(i in 1:10) {\n  for(j in 1:10) {\n   multiplication_table[i, j] = (i*j)\n  }\n}\n```\n:::\n\n\nProblem 5:\n\nsnakes and ladders. how do you add in a representaion of the board, so that you change which square the player is on depending on whether they land on a ladder or snake.\n\ntry solving the problem in a simpler way . like maybe roll. dice for ladder\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsave_rolls <- c()\nfor(sims in 1:1000){\n    total_sum<-0\n    number_of_rolls<-0\n    curpos <-0\n    ladder <- c(3:11, 6:17,9:18,10:12)\n    snakes <- c(14:4, 19:8, 22:20, 24:16)\n  while(total_sum < 25){\n    total_sum <-total_sum+sample(c(1,2,3,4,5,6),1)\n      if (curpos %in% snakes) {\n       curpos = curpos +1  }\n      if (curpos %in% ladder){\n       curpos = curpos +1\n  }\n  number_of_rolls <- number_of_rolls+1\n\n}\nsave_rolls[sims] <- number_of_rolls\n}\nmean(save_rolls)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 7.61\n```\n:::\n:::\n",
    "supporting": [
      "Midterm-part-2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}