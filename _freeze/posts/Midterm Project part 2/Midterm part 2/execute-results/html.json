{
  "hash": "700ce0b7cb229f231152d73a262b5c7c",
  "result": {
    "markdown": "---\ntitle: \"Midterm Part 2\"\nautor: \"Shifa Maqsood\"\nimage: \"Unknown.png\"\n---\n\n\n#Easier problems\n\nProblem 1: List all of the odd numbers from 1 to 100. you could use the seq() function How could you do this without using the seq() function? Consider using the mod function %%, which evaluates whether or not there is a remainder when dividing one number by another.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (i in 1:100){\n  if(i%%2)\n    print(i)\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n[1] 3\n[1] 5\n[1] 7\n[1] 9\n[1] 11\n[1] 13\n[1] 15\n[1] 17\n[1] 19\n[1] 21\n[1] 23\n[1] 25\n[1] 27\n[1] 29\n[1] 31\n[1] 33\n[1] 35\n[1] 37\n[1] 39\n[1] 41\n[1] 43\n[1] 45\n[1] 47\n[1] 49\n[1] 51\n[1] 53\n[1] 55\n[1] 57\n[1] 59\n[1] 61\n[1] 63\n[1] 65\n[1] 67\n[1] 69\n[1] 71\n[1] 73\n[1] 75\n[1] 77\n[1] 79\n[1] 81\n[1] 83\n[1] 85\n[1] 87\n[1] 89\n[1] 91\n[1] 93\n[1] 95\n[1] 97\n[1] 99\n```\n:::\n:::\n\n\nProblem 2 : Generate 100 random numbers within a specific range runif can do this\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrunif(100,1,100)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  [1] 64.436461 67.425996 37.733902 25.856696 17.667798 27.248509 33.781161\n  [8] 39.416043 73.402753 83.454094 18.722650 71.222834 79.320418 23.590661\n [15] 50.457405 10.546260 99.383711  2.040373 69.579436 11.982844 31.805200\n [22] 16.199321 71.087320 23.541194 33.461554 77.034933 37.734349  6.414609\n [29] 56.506032 70.241069 92.316900 82.635751 63.143661 87.767597 34.839778\n [36] 26.575372 53.856961 23.896905  2.375869  5.463429 80.227275 20.248844\n [43] 34.181192 82.991221 47.015637  3.584679 18.295547 79.309527 23.190767\n [50] 69.583087 40.995297 72.655054 29.120021 29.849129 46.558720 10.494169\n [57] 72.555098  1.284366 29.831388 33.035167 69.502316 92.487189 32.488956\n [64] 17.362531 15.819941  6.418205 38.140962  3.834842 90.958050 31.441183\n [71] 45.970284 24.347698 81.437447 45.072091 35.915473 10.762908 11.546970\n [78] 98.939248 23.466218 47.661477  5.726721 88.951057 88.208977 23.607445\n [85] 29.625455 31.556256 74.733384  9.773470 95.004525 98.513786  5.654404\n [92] 97.363531 66.241705 74.641934 85.325595 31.501481 19.444449 42.712021\n [99] 76.486768  9.204785\n```\n:::\n:::\n\n\nProblem 3: Create a variable that stores a 20x20 matrix of random numbers\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrandom_num <-matrix(runif(400, min=3,max=45), nrow = 20, ncol=20)\n```\n:::\n\n\n#Harder problems\n\nProblem 1: FizzBuzz List the numbers from 1 to 100 with the following constraints.\n\nThis question can be solved using for loop and if else statements\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfizzb <- c(1:100)\nfor (i in 1:length(fizzb)){\n  fizzb[i] <-i\n  if(i%%3 == 0 & i%%5== 0){\n    fizzb[i] =\"FizzBuzz\"\n  } else if (i%%3 ==0){\n    fizzb[i] =\"Fizz\"\n  }\nelse if (i%%5 ==0 )\n  fizzb[i] = \"Buzz\"\n}\n```\n:::\n\n\nProblem 2:\n\n\n::: {.cell}\n\n```{.r .cell-code}\na<-runif(10000000,0,100)\nhist(a)\n```\n\n::: {.cell-output-display}\n![](Midterm-part-2_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nProblem 3: Assume that a pair of dice are rolled. Using monte carlo-simulation, compute the probabilities of rolling a 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, and 12, respectively.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndice1 <- replicate(1000,(sample(1:6,1,replace= TRUE)))\ndice2 <-replicate(1000,(sample(1:6,1,replace= TRUE)))\nsim <- c()\ncombined <- dice1+dice2\nsim <- table(combined)/1000\n```\n:::\n\n\nProblem 4: Multiplication table\n\nGenerate a matrix for a multiplication table. For example, the labels for the columns could be the numbers 1 to 10, and the labels for the rows could be the numbers 1 to 10. The contents of each of the cells in the matrix should be correct answer for multiplying the column value by the row value.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmultiplication_table <-matrix(NA, nrow=10, ncol=10)\ncolnames(multiplication_table) <- c(\"1\", \"2\", \"3\" ,\"4\", \"5\", \"6\", \"7\",\"8\",\"9\",\"10\")\n\nrownames(multiplication_table) <- c(\"1\", \"2\", \"3\" ,\"4\", \"5\", \"6\", \"7\",\"8\",\"9\",\"10\")\n\nfor(i in 1:10) {\n  for(j in 1:10) {\n   multiplication_table[i, j] = (i*j)\n  }\n}\n```\n:::\n\n\nProblem 5:\n\nsnakes and ladders. how do you add in a representaion of the board, so that you change which square the player is on depending on whether they land on a ladder or snake.\n\ntry doing it for one ladder\n\nso i could do something like if number of roll is ==3 then do this cuz curpos is not interacting with my dice roll\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsave_rolls <- c()\nfor(sims in 1:100){\ncurpos<-0\nnumber_of_rolls<-0\n\nwhile(curpos < 25){\n    curpos <- curpos+sample(c(1,2,3,4,5,6),1)\n   if (curpos == 3){\n     curpos <-11\n   }\n    if (curpos == 6){\n      curpos <- 17\n    }\n    if (curpos == 10){\n      curpos <- 12\n    }\n    if (curpos == 14){\n      curpos <- 4\n    }\n    if (curpos ==19){\n      curpos <-8\n    }\n    if(curpos == 22){\n      curpos <- 20\n    }\n    if (curpos ==24){\n      curpos <- 16\n    }\n  number_of_rolls <- number_of_rolls+1\n}\nsave_rolls[sims] <- number_of_rolls\n}\nmean(save_rolls)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 9.98\n```\n:::\n:::\n",
    "supporting": [
      "Midterm-part-2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}