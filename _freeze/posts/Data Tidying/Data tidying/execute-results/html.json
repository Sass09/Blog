{
  "hash": "7c08d5fe81a1e5010be3faae2df8cdb2",
  "result": {
    "markdown": "---\ntitle: \"Data Import\"\nauthor: Shifa Maqsood\n---\n\n\n\n\n# Data Structures\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#untidy and tidy data\n\nuntidy_data <- read.csv(\"data/untidy_data.csv\")\n#untidy data has two values in one column\n#three years of data \n#harder to do mathematical operation on it \n\ntidy_data <- read.csv(\"data/tidy_data.csv\")\n#-organized\n#-has each cell for each value\n#-Each observation must have its own row\n#-Each variable must have its own column\n#-Each value must have its own cell\ntidy_data %>%\n  group_by(customer_id) %>%\n  summarise(\n    total_items = sum(items),\n    total_price = sum(totalprice)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 3\n  customer_id total_items total_price\n        <int>       <int>       <dbl>\n1           1          20       101. \n2           2           8        37.8\n3           3          14        67.2\n4           4          14        60.6\n5           5          20        98.9\n```\n:::\n:::\n\n\n# Reshaping Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Wide data and long data conversion\n\n# select just the customer ID and 3 total price columns\nwide_totalprice <- select(\n  .data = untidy_data,\n  customer_id, \n  `2018` = totalprice_2018,\n  `2019` = totalprice_2019,\n  `2020` = totalprice_2020\n)\n## Wide to long\nlong_totalprice <- pivot_longer(\n  data = wide_totalprice,\n  cols = `2018`:`2020`,\n  names_to = \"year\",\n  values_to = \"totalprice\")\n\n#untidy_data[,c(5:7)] this can also be done to select last three columns as well\n#logn data is easy for ggplot\n\n# Long to wide\nwide_by_yr <- pivot_wider(\n  data = long_totalprice,\n  id_cols = customer_id, # identifying column(s) whose levels will become new columns\n  names_from = year, # the new column names\n  values_from = totalprice # the new column values\n)\n```\n:::\n\n\n# Multi-step tidying\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlonger_data <- pivot_longer(\n  data = untidy_data, \n  cols = itemsprice_2018:totalprice_2020, # columns to make long \n  names_to = c(\"category\", \"year\"), # new column names for cols\n  names_sep = \"_\", # how to split cols into new columns\n  # names_pattern = \"(.*)_(.*)\", # alternative to names_sep\n  values_to = \"value\", # new column name for values\n  \n  # make sure new columns are the right data type\n  names_transform = list(year = as.integer),\n  values_transform = list(value = as.character) \n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#One variable per column\nwider_data <- pivot_wider(\n  data = longer_data,\n  id_cols = c(customer_id, year),\n  names_from = category,\n  values_from = value\n)\n\n#One value per cell\nsplit_data <- separate(\n  data = wider_data, \n  col = itemsprice, # the column to split\n  into = c(\"items\", \"price_per_item\"), # the new columns to create\n  sep = \" \", # split col by space between two numbers\n  remove = TRUE, # whether to remove to old col\n  convert = TRUE # whether to fix the data type of the new columns\n)\n\n# removing parentheses\nmutated_data <- mutate(\n  .data = split_data,\n  price_per_item = stringr::str_replace_all(\n    string = price_per_item, \n    pattern = \"[()]\", #put what we want to replace #regex\n    replacement = \"\" #what we want to replace with\n  )\n)\n\n#fixing data types\ntidy_data <- type_convert(\n  df = mutated_data,\n  trim_ws = TRUE # removes spaces before and after values\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\n── Column specification ────────────────────────────────────────────────────────\ncols(\n  price_per_item = col_double(),\n  totalprice = col_double()\n)\n```\n:::\n\n```{.r .cell-code}\n# check the data types\nglimpse(tidy_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 15\nColumns: 5\n$ customer_id    <int> 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5\n$ year           <int> 2018, 2019, 2020, 2018, 2019, 2020, 2018, 2019, 2020, 2…\n$ items          <int> 2, 8, 10, 1, 6, 1, 4, 5, 5, 10, 1, 3, 3, 9, 8\n$ price_per_item <dbl> 3.91, 4.72, 5.59, 3.91, 4.72, 5.59, 3.91, 4.72, 5.59, 3…\n$ totalprice     <dbl> 7.82, 37.76, 55.90, 3.91, 28.32, 5.59, 15.64, 23.60, 27…\n```\n:::\n:::\n\n\n# Pipes\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#You can also use pipes \n\ntidy_data <- read_csv(file = \"data/untidy_data.csv\", show_col_types = FALSE) %>% \n  pivot_longer( cols = itemsprice_2018:totalprice_2020, names_to = c(\"category\", \"year\"), names_sep = \"_\", values_to =\"value\", names_transform = list(year = as.integer), values_transform = list(value = as.character) ) %>% \npivot_wider( id_cols = c(customer_id, year), names_from = category, values_from = value ) %>%\n  separate( col = itemsprice, into = c(\"items\", \"price_per_item\"), sep = \" \", remove = TRUE, convert = TRUE ) %>%\n  mutate( price_per_item = stringr::str_replace_all( string = price_per_item, pattern =\" \", replacement =\"\" ) ) %>%\n  type_convert( trim_ws = TRUE )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\n── Column specification ────────────────────────────────────────────────────────\ncols(\n  price_per_item = col_character(),\n  totalprice = col_double()\n)\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}