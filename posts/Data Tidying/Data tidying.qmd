---
title: "Data Import"
author: Shifa Maqsood
---

```{r setup, include=FALSE}
library(tidyverse)

#three rules for tidy data
#-Each observation must have its own row
#-Each variable must have its own column
#-Each value must have its own cell
```

# Data Structures

```{r}

#untidy and tidy data

untidy_data <- read.csv("data/untidy_data.csv")
#untidy data has two values in one column
#three years of data 
#harder to do mathematical operation on it 

tidy_data <- read.csv("data/tidy_data.csv")
#-organized
#-has each cell for each value
#-Each observation must have its own row
#-Each variable must have its own column
#-Each value must have its own cell
tidy_data %>%
  group_by(customer_id) %>%
  summarise(
    total_items = sum(items),
    total_price = sum(totalprice)
  )

```

# Reshaping Data

```{r}

#Wide data and long data conversion

# select just the customer ID and 3 total price columns
wide_totalprice <- select(
  .data = untidy_data,
  customer_id, 
  `2018` = totalprice_2018,
  `2019` = totalprice_2019,
  `2020` = totalprice_2020
)
## Wide to long
long_totalprice <- pivot_longer(
  data = wide_totalprice,
  cols = `2018`:`2020`,
  names_to = "year",
  values_to = "totalprice")

#untidy_data[,c(5:7)] this can also be done to select last three columns as well
#logn data is easy for ggplot

# Long to wide
wide_by_yr <- pivot_wider(
  data = long_totalprice,
  id_cols = customer_id, # identifying column(s) whose levels will become new columns
  names_from = year, # the new column names
  values_from = totalprice # the new column values
)

```

# Multi-step tidying

```{r}
longer_data <- pivot_longer(
  data = untidy_data, 
  cols = itemsprice_2018:totalprice_2020, # columns to make long 
  names_to = c("category", "year"), # new column names for cols
  names_sep = "_", # how to split cols into new columns
  # names_pattern = "(.*)_(.*)", # alternative to names_sep
  values_to = "value", # new column name for values
  
  # make sure new columns are the right data type
  names_transform = list(year = as.integer),
  values_transform = list(value = as.character) 
)

```

```{r}
#One variable per column
wider_data <- pivot_wider(
  data = longer_data,
  id_cols = c(customer_id, year),
  names_from = category,
  values_from = value
)

#One value per cell
split_data <- separate(
  data = wider_data, 
  col = itemsprice, # the column to split
  into = c("items", "price_per_item"), # the new columns to create
  sep = " ", # split col by space between two numbers
  remove = TRUE, # whether to remove to old col
  convert = TRUE # whether to fix the data type of the new columns
)

# removing parentheses
mutated_data <- mutate(
  .data = split_data,
  price_per_item = stringr::str_replace_all(
    string = price_per_item, 
    pattern = "[()]", #put what we want to replace #regex
    replacement = "" #what we want to replace with
  )
)

#fixing data types
tidy_data <- type_convert(
  df = mutated_data,
  trim_ws = TRUE # removes spaces before and after values
)

# check the data types
glimpse(tidy_data)
```

# Pipes

```{r}
#You can also use pipes 

tidy_data <- read_csv(file = "data/untidy_data.csv", show_col_types = FALSE) %>% 
  pivot_longer( cols = itemsprice_2018:totalprice_2020, names_to = c("category", "year"), names_sep = "_", values_to ="value", names_transform = list(year = as.integer), values_transform = list(value = as.character) ) %>% 
pivot_wider( id_cols = c(customer_id, year), names_from = category, values_from = value ) %>%
  separate( col = itemsprice, into = c("items", "price_per_item"), sep = " ", remove = TRUE, convert = TRUE ) %>%
  mutate( price_per_item = stringr::str_replace_all( string = price_per_item, pattern =" ", replacement ="" ) ) %>%
  type_convert( trim_ws = TRUE )
```


